{"id":"0odR","dependencies":[{"name":"/Users/ashley/Documents/personal/JS/lens-studio-physics/package.json","includedInParent":true,"mtime":1571074916167},{"name":"/Users/ashley/Documents/personal/JS/lens-studio-physics/node_modules/cannon/package.json","includedInParent":true,"mtime":1571074066777},{"name":"./Constraint","loc":{"line":3,"column":25},"parent":"/Users/ashley/Documents/personal/JS/lens-studio-physics/node_modules/cannon/src/constraints/PointToPointConstraint.js","resolved":"/Users/ashley/Documents/personal/JS/lens-studio-physics/node_modules/cannon/src/constraints/Constraint.js"},{"name":"../equations/ContactEquation","loc":{"line":4,"column":30},"parent":"/Users/ashley/Documents/personal/JS/lens-studio-physics/node_modules/cannon/src/constraints/PointToPointConstraint.js","resolved":"/Users/ashley/Documents/personal/JS/lens-studio-physics/node_modules/cannon/src/equations/ContactEquation.js"},{"name":"../math/Vec3","loc":{"line":5,"column":19},"parent":"/Users/ashley/Documents/personal/JS/lens-studio-physics/node_modules/cannon/src/constraints/PointToPointConstraint.js","resolved":"/Users/ashley/Documents/personal/JS/lens-studio-physics/node_modules/cannon/src/math/Vec3.js"}],"generated":{"js":"module.exports = PointToPointConstraint;\n\nvar Constraint = require('./Constraint');\nvar ContactEquation = require('../equations/ContactEquation');\nvar Vec3 = require('../math/Vec3');\n\n/**\n * Connects two bodies at given offset points.\n * @class PointToPointConstraint\n * @extends Constraint\n * @constructor\n * @param {Body} bodyA\n * @param {Vec3} pivotA The point relative to the center of mass of bodyA which bodyA is constrained to.\n * @param {Body} bodyB Body that will be constrained in a similar way to the same point as bodyA. We will therefore get a link between bodyA and bodyB. If not specified, bodyA will be constrained to a static point.\n * @param {Vec3} pivotB See pivotA.\n * @param {Number} maxForce The maximum force that should be applied to constrain the bodies.\n *\n * @example\n *     var bodyA = new Body({ mass: 1 });\n *     var bodyB = new Body({ mass: 1 });\n *     bodyA.position.set(-1, 0, 0);\n *     bodyB.position.set(1, 0, 0);\n *     bodyA.addShape(shapeA);\n *     bodyB.addShape(shapeB);\n *     world.addBody(bodyA);\n *     world.addBody(bodyB);\n *     var localPivotA = new Vec3(1, 0, 0);\n *     var localPivotB = new Vec3(-1, 0, 0);\n *     var constraint = new PointToPointConstraint(bodyA, localPivotA, bodyB, localPivotB);\n *     world.addConstraint(constraint);\n */\nfunction PointToPointConstraint(bodyA,pivotA,bodyB,pivotB,maxForce){\n    Constraint.call(this,bodyA,bodyB);\n\n    maxForce = typeof(maxForce) !== 'undefined' ? maxForce : 1e6;\n\n    /**\n     * Pivot, defined locally in bodyA.\n     * @property {Vec3} pivotA\n     */\n    this.pivotA = pivotA ? pivotA.clone() : new Vec3();\n\n    /**\n     * Pivot, defined locally in bodyB.\n     * @property {Vec3} pivotB\n     */\n    this.pivotB = pivotB ? pivotB.clone() : new Vec3();\n\n    /**\n     * @property {ContactEquation} equationX\n     */\n    var x = this.equationX = new ContactEquation(bodyA,bodyB);\n\n    /**\n     * @property {ContactEquation} equationY\n     */\n    var y = this.equationY = new ContactEquation(bodyA,bodyB);\n\n    /**\n     * @property {ContactEquation} equationZ\n     */\n    var z = this.equationZ = new ContactEquation(bodyA,bodyB);\n\n    // Equations to be fed to the solver\n    this.equations.push(x, y, z);\n\n    // Make the equations bidirectional\n    x.minForce = y.minForce = z.minForce = -maxForce;\n    x.maxForce = y.maxForce = z.maxForce =  maxForce;\n\n    x.ni.set(1, 0, 0);\n    y.ni.set(0, 1, 0);\n    z.ni.set(0, 0, 1);\n}\nPointToPointConstraint.prototype = new Constraint();\n\nPointToPointConstraint.prototype.update = function(){\n    var bodyA = this.bodyA;\n    var bodyB = this.bodyB;\n    var x = this.equationX;\n    var y = this.equationY;\n    var z = this.equationZ;\n\n    // Rotate the pivots to world space\n    bodyA.quaternion.vmult(this.pivotA,x.ri);\n    bodyB.quaternion.vmult(this.pivotB,x.rj);\n\n    y.ri.copy(x.ri);\n    y.rj.copy(x.rj);\n    z.ri.copy(x.ri);\n    z.rj.copy(x.rj);\n};"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/cannon/src/constraints/PointToPointConstraint.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}}],"sources":{"../node_modules/cannon/src/constraints/PointToPointConstraint.js":"module.exports = PointToPointConstraint;\n\nvar Constraint = require('./Constraint');\nvar ContactEquation = require('../equations/ContactEquation');\nvar Vec3 = require('../math/Vec3');\n\n/**\n * Connects two bodies at given offset points.\n * @class PointToPointConstraint\n * @extends Constraint\n * @constructor\n * @param {Body} bodyA\n * @param {Vec3} pivotA The point relative to the center of mass of bodyA which bodyA is constrained to.\n * @param {Body} bodyB Body that will be constrained in a similar way to the same point as bodyA. We will therefore get a link between bodyA and bodyB. If not specified, bodyA will be constrained to a static point.\n * @param {Vec3} pivotB See pivotA.\n * @param {Number} maxForce The maximum force that should be applied to constrain the bodies.\n *\n * @example\n *     var bodyA = new Body({ mass: 1 });\n *     var bodyB = new Body({ mass: 1 });\n *     bodyA.position.set(-1, 0, 0);\n *     bodyB.position.set(1, 0, 0);\n *     bodyA.addShape(shapeA);\n *     bodyB.addShape(shapeB);\n *     world.addBody(bodyA);\n *     world.addBody(bodyB);\n *     var localPivotA = new Vec3(1, 0, 0);\n *     var localPivotB = new Vec3(-1, 0, 0);\n *     var constraint = new PointToPointConstraint(bodyA, localPivotA, bodyB, localPivotB);\n *     world.addConstraint(constraint);\n */\nfunction PointToPointConstraint(bodyA,pivotA,bodyB,pivotB,maxForce){\n    Constraint.call(this,bodyA,bodyB);\n\n    maxForce = typeof(maxForce) !== 'undefined' ? maxForce : 1e6;\n\n    /**\n     * Pivot, defined locally in bodyA.\n     * @property {Vec3} pivotA\n     */\n    this.pivotA = pivotA ? pivotA.clone() : new Vec3();\n\n    /**\n     * Pivot, defined locally in bodyB.\n     * @property {Vec3} pivotB\n     */\n    this.pivotB = pivotB ? pivotB.clone() : new Vec3();\n\n    /**\n     * @property {ContactEquation} equationX\n     */\n    var x = this.equationX = new ContactEquation(bodyA,bodyB);\n\n    /**\n     * @property {ContactEquation} equationY\n     */\n    var y = this.equationY = new ContactEquation(bodyA,bodyB);\n\n    /**\n     * @property {ContactEquation} equationZ\n     */\n    var z = this.equationZ = new ContactEquation(bodyA,bodyB);\n\n    // Equations to be fed to the solver\n    this.equations.push(x, y, z);\n\n    // Make the equations bidirectional\n    x.minForce = y.minForce = z.minForce = -maxForce;\n    x.maxForce = y.maxForce = z.maxForce =  maxForce;\n\n    x.ni.set(1, 0, 0);\n    y.ni.set(0, 1, 0);\n    z.ni.set(0, 0, 1);\n}\nPointToPointConstraint.prototype = new Constraint();\n\nPointToPointConstraint.prototype.update = function(){\n    var bodyA = this.bodyA;\n    var bodyB = this.bodyB;\n    var x = this.equationX;\n    var y = this.equationY;\n    var z = this.equationZ;\n\n    // Rotate the pivots to world space\n    bodyA.quaternion.vmult(this.pivotA,x.ri);\n    bodyB.quaternion.vmult(this.pivotB,x.rj);\n\n    y.ri.copy(x.ri);\n    y.rj.copy(x.rj);\n    z.ri.copy(x.ri);\n    z.rj.copy(x.rj);\n};"},"lineCount":92}},"error":null,"hash":"8a0fb2b4fe63c4bf9d22aa349f1817cb","cacheData":{"env":{}}}