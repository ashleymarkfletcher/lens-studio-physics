{"id":"1+Yp","dependencies":[{"name":"/Users/ashley/Documents/personal/JS/lens-studio-physics/package.json","includedInParent":true,"mtime":1571074916167},{"name":"/Users/ashley/Documents/personal/JS/lens-studio-physics/node_modules/cannon/package.json","includedInParent":true,"mtime":1571074066777},{"name":"./Shape","loc":{"line":3,"column":20},"parent":"/Users/ashley/Documents/personal/JS/lens-studio-physics/node_modules/cannon/src/shapes/ConvexPolyhedron.js","resolved":"/Users/ashley/Documents/personal/JS/lens-studio-physics/node_modules/cannon/src/shapes/Shape.js"},{"name":"../math/Vec3","loc":{"line":4,"column":19},"parent":"/Users/ashley/Documents/personal/JS/lens-studio-physics/node_modules/cannon/src/shapes/ConvexPolyhedron.js","resolved":"/Users/ashley/Documents/personal/JS/lens-studio-physics/node_modules/cannon/src/math/Vec3.js"},{"name":"../math/Quaternion","loc":{"line":5,"column":25},"parent":"/Users/ashley/Documents/personal/JS/lens-studio-physics/node_modules/cannon/src/shapes/ConvexPolyhedron.js","resolved":"/Users/ashley/Documents/personal/JS/lens-studio-physics/node_modules/cannon/src/math/Quaternion.js"},{"name":"../math/Transform","loc":{"line":6,"column":24},"parent":"/Users/ashley/Documents/personal/JS/lens-studio-physics/node_modules/cannon/src/shapes/ConvexPolyhedron.js","resolved":"/Users/ashley/Documents/personal/JS/lens-studio-physics/node_modules/cannon/src/math/Transform.js"}],"generated":{"js":"module.exports = ConvexPolyhedron;\n\nvar Shape = require('./Shape');\nvar Vec3 = require('../math/Vec3');\nvar Quaternion = require('../math/Quaternion');\nvar Transform = require('../math/Transform');\n\n/**\n * A set of polygons describing a convex shape.\n * @class ConvexPolyhedron\n * @constructor\n * @extends Shape\n * @description The shape MUST be convex for the code to work properly. No polygons may be coplanar (contained\n * in the same 3D plane), instead these should be merged into one polygon.\n *\n * @param {array} points An array of Vec3's\n * @param {array} faces Array of integer arrays, describing which vertices that is included in each face.\n *\n * @author qiao / https://github.com/qiao (original author, see https://github.com/qiao/three.js/commit/85026f0c769e4000148a67d45a9e9b9c5108836f)\n * @author schteppe / https://github.com/schteppe\n * @see http://www.altdevblogaday.com/2011/05/13/contact-generation-between-3d-convex-meshes/\n * @see http://bullet.googlecode.com/svn/trunk/src/BulletCollision/NarrowPhaseCollision/btPolyhedralContactClipping.cpp\n *\n * @todo Move the clipping functions to ContactGenerator?\n * @todo Automatically merge coplanar polygons in constructor.\n */\nfunction ConvexPolyhedron(points, faces, uniqueAxes) {\n    Shape.call(this, {\n        type: Shape.types.CONVEXPOLYHEDRON\n    });\n\n    /**\n     * Array of Vec3\n     * @property vertices\n     * @type {Array}\n     */\n    this.vertices = points||[];\n\n    this.worldVertices = []; // World transformed version of .vertices\n    this.worldVerticesNeedsUpdate = true;\n\n    /**\n     * Array of integer arrays, indicating which vertices each face consists of\n     * @property faces\n     * @type {Array}\n     */\n    this.faces = faces||[];\n\n    /**\n     * Array of Vec3\n     * @property faceNormals\n     * @type {Array}\n     */\n    this.faceNormals = [];\n    this.computeNormals();\n\n    this.worldFaceNormalsNeedsUpdate = true;\n    this.worldFaceNormals = []; // World transformed version of .faceNormals\n\n    /**\n     * Array of Vec3\n     * @property uniqueEdges\n     * @type {Array}\n     */\n    this.uniqueEdges = [];\n\n    /**\n     * If given, these locally defined, normalized axes are the only ones being checked when doing separating axis check.\n     * @property {Array} uniqueAxes\n     */\n    this.uniqueAxes = uniqueAxes ? uniqueAxes.slice() : null;\n\n    this.computeEdges();\n    this.updateBoundingSphereRadius();\n}\nConvexPolyhedron.prototype = new Shape();\nConvexPolyhedron.prototype.constructor = ConvexPolyhedron;\n\nvar computeEdges_tmpEdge = new Vec3();\n/**\n * Computes uniqueEdges\n * @method computeEdges\n */\nConvexPolyhedron.prototype.computeEdges = function(){\n    var faces = this.faces;\n    var vertices = this.vertices;\n    var nv = vertices.length;\n    var edges = this.uniqueEdges;\n\n    edges.length = 0;\n\n    var edge = computeEdges_tmpEdge;\n\n    for(var i=0; i !== faces.length; i++){\n        var face = faces[i];\n        var numVertices = face.length;\n        for(var j = 0; j !== numVertices; j++){\n            var k = ( j+1 ) % numVertices;\n            vertices[face[j]].vsub(vertices[face[k]], edge);\n            edge.normalize();\n            var found = false;\n            for(var p=0; p !== edges.length; p++){\n                if (edges[p].almostEquals(edge) || edges[p].almostEquals(edge)){\n                    found = true;\n                    break;\n                }\n            }\n\n            if (!found){\n                edges.push(edge.clone());\n            }\n        }\n    }\n};\n\n/**\n * Compute the normals of the faces. Will reuse existing Vec3 objects in the .faceNormals array if they exist.\n * @method computeNormals\n */\nConvexPolyhedron.prototype.computeNormals = function(){\n    this.faceNormals.length = this.faces.length;\n\n    // Generate normals\n    for(var i=0; i<this.faces.length; i++){\n\n        // Check so all vertices exists for this face\n        for(var j=0; j<this.faces[i].length; j++){\n            if(!this.vertices[this.faces[i][j]]){\n                throw new Error(\"Vertex \"+this.faces[i][j]+\" not found!\");\n            }\n        }\n\n        var n = this.faceNormals[i] || new Vec3();\n        this.getFaceNormal(i,n);\n        n.negate(n);\n        this.faceNormals[i] = n;\n        var vertex = this.vertices[this.faces[i][0]];\n        if(n.dot(vertex) < 0){\n            console.error(\".faceNormals[\" + i + \"] = Vec3(\"+n.toString()+\") looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule.\");\n            for(var j=0; j<this.faces[i].length; j++){\n                console.warn(\".vertices[\"+this.faces[i][j]+\"] = Vec3(\"+this.vertices[this.faces[i][j]].toString()+\")\");\n            }\n        }\n    }\n};\n\n/**\n * Get face normal given 3 vertices\n * @static\n * @method getFaceNormal\n * @param {Vec3} va\n * @param {Vec3} vb\n * @param {Vec3} vc\n * @param {Vec3} target\n */\nvar cb = new Vec3();\nvar ab = new Vec3();\nConvexPolyhedron.computeNormal = function ( va, vb, vc, target ) {\n    vb.vsub(va,ab);\n    vc.vsub(vb,cb);\n    cb.cross(ab,target);\n    if ( !target.isZero() ) {\n        target.normalize();\n    }\n};\n\n/**\n * Compute the normal of a face from its vertices\n * @method getFaceNormal\n * @param  {Number} i\n * @param  {Vec3} target\n */\nConvexPolyhedron.prototype.getFaceNormal = function(i,target){\n    var f = this.faces[i];\n    var va = this.vertices[f[0]];\n    var vb = this.vertices[f[1]];\n    var vc = this.vertices[f[2]];\n    return ConvexPolyhedron.computeNormal(va,vb,vc,target);\n};\n\n/**\n * @method clipAgainstHull\n * @param {Vec3} posA\n * @param {Quaternion} quatA\n * @param {ConvexPolyhedron} hullB\n * @param {Vec3} posB\n * @param {Quaternion} quatB\n * @param {Vec3} separatingNormal\n * @param {Number} minDist Clamp distance\n * @param {Number} maxDist\n * @param {array} result The an array of contact point objects, see clipFaceAgainstHull\n * @see http://bullet.googlecode.com/svn/trunk/src/BulletCollision/NarrowPhaseCollision/btPolyhedralContactClipping.cpp\n */\nvar cah_WorldNormal = new Vec3();\nConvexPolyhedron.prototype.clipAgainstHull = function(posA,quatA,hullB,posB,quatB,separatingNormal,minDist,maxDist,result){\n    var WorldNormal = cah_WorldNormal;\n    var hullA = this;\n    var curMaxDist = maxDist;\n    var closestFaceB = -1;\n    var dmax = -Number.MAX_VALUE;\n    for(var face=0; face < hullB.faces.length; face++){\n        WorldNormal.copy(hullB.faceNormals[face]);\n        quatB.vmult(WorldNormal,WorldNormal);\n        //posB.vadd(WorldNormal,WorldNormal);\n        var d = WorldNormal.dot(separatingNormal);\n        if (d > dmax){\n            dmax = d;\n            closestFaceB = face;\n        }\n    }\n    var worldVertsB1 = [];\n    var polyB = hullB.faces[closestFaceB];\n    var numVertices = polyB.length;\n    for(var e0=0; e0<numVertices; e0++){\n        var b = hullB.vertices[polyB[e0]];\n        var worldb = new Vec3();\n        worldb.copy(b);\n        quatB.vmult(worldb,worldb);\n        posB.vadd(worldb,worldb);\n        worldVertsB1.push(worldb);\n    }\n\n    if (closestFaceB>=0){\n        this.clipFaceAgainstHull(separatingNormal,\n                                 posA,\n                                 quatA,\n                                 worldVertsB1,\n                                 minDist,\n                                 maxDist,\n                                 result);\n    }\n};\n\n/**\n * Find the separating axis between this hull and another\n * @method findSeparatingAxis\n * @param {ConvexPolyhedron} hullB\n * @param {Vec3} posA\n * @param {Quaternion} quatA\n * @param {Vec3} posB\n * @param {Quaternion} quatB\n * @param {Vec3} target The target vector to save the axis in\n * @return {bool} Returns false if a separation is found, else true\n */\nvar fsa_faceANormalWS3 = new Vec3(),\n    fsa_Worldnormal1 = new Vec3(),\n    fsa_deltaC = new Vec3(),\n    fsa_worldEdge0 = new Vec3(),\n    fsa_worldEdge1 = new Vec3(),\n    fsa_Cross = new Vec3();\nConvexPolyhedron.prototype.findSeparatingAxis = function(hullB,posA,quatA,posB,quatB,target, faceListA, faceListB){\n    var faceANormalWS3 = fsa_faceANormalWS3,\n        Worldnormal1 = fsa_Worldnormal1,\n        deltaC = fsa_deltaC,\n        worldEdge0 = fsa_worldEdge0,\n        worldEdge1 = fsa_worldEdge1,\n        Cross = fsa_Cross;\n\n    var dmin = Number.MAX_VALUE;\n    var hullA = this;\n    var curPlaneTests=0;\n\n    if(!hullA.uniqueAxes){\n\n        var numFacesA = faceListA ? faceListA.length : hullA.faces.length;\n\n        // Test face normals from hullA\n        for(var i=0; i<numFacesA; i++){\n            var fi = faceListA ? faceListA[i] : i;\n\n            // Get world face normal\n            faceANormalWS3.copy(hullA.faceNormals[fi]);\n            quatA.vmult(faceANormalWS3,faceANormalWS3);\n\n            var d = hullA.testSepAxis(faceANormalWS3, hullB, posA, quatA, posB, quatB);\n            if(d===false){\n                return false;\n            }\n\n            if(d<dmin){\n                dmin = d;\n                target.copy(faceANormalWS3);\n            }\n        }\n\n    } else {\n\n        // Test unique axes\n        for(var i = 0; i !== hullA.uniqueAxes.length; i++){\n\n            // Get world axis\n            quatA.vmult(hullA.uniqueAxes[i],faceANormalWS3);\n\n            var d = hullA.testSepAxis(faceANormalWS3, hullB, posA, quatA, posB, quatB);\n            if(d===false){\n                return false;\n            }\n\n            if(d<dmin){\n                dmin = d;\n                target.copy(faceANormalWS3);\n            }\n        }\n    }\n\n    if(!hullB.uniqueAxes){\n\n        // Test face normals from hullB\n        var numFacesB = faceListB ? faceListB.length : hullB.faces.length;\n        for(var i=0;i<numFacesB;i++){\n\n            var fi = faceListB ? faceListB[i] : i;\n\n            Worldnormal1.copy(hullB.faceNormals[fi]);\n            quatB.vmult(Worldnormal1,Worldnormal1);\n            curPlaneTests++;\n            var d = hullA.testSepAxis(Worldnormal1, hullB,posA,quatA,posB,quatB);\n            if(d===false){\n                return false;\n            }\n\n            if(d<dmin){\n                dmin = d;\n                target.copy(Worldnormal1);\n            }\n        }\n    } else {\n\n        // Test unique axes in B\n        for(var i = 0; i !== hullB.uniqueAxes.length; i++){\n            quatB.vmult(hullB.uniqueAxes[i],Worldnormal1);\n\n            curPlaneTests++;\n            var d = hullA.testSepAxis(Worldnormal1, hullB,posA,quatA,posB,quatB);\n            if(d===false){\n                return false;\n            }\n\n            if(d<dmin){\n                dmin = d;\n                target.copy(Worldnormal1);\n            }\n        }\n    }\n\n    // Test edges\n    for(var e0=0; e0 !== hullA.uniqueEdges.length; e0++){\n\n        // Get world edge\n        quatA.vmult(hullA.uniqueEdges[e0],worldEdge0);\n\n        for(var e1=0; e1 !== hullB.uniqueEdges.length; e1++){\n\n            // Get world edge 2\n            quatB.vmult(hullB.uniqueEdges[e1], worldEdge1);\n            worldEdge0.cross(worldEdge1,Cross);\n\n            if(!Cross.almostZero()){\n                Cross.normalize();\n                var dist = hullA.testSepAxis(Cross, hullB, posA, quatA, posB, quatB);\n                if(dist === false){\n                    return false;\n                }\n                if(dist < dmin){\n                    dmin = dist;\n                    target.copy(Cross);\n                }\n            }\n        }\n    }\n\n    posB.vsub(posA,deltaC);\n    if((deltaC.dot(target))>0.0){\n        target.negate(target);\n    }\n\n    return true;\n};\n\nvar maxminA=[], maxminB=[];\n\n/**\n * Test separating axis against two hulls. Both hulls are projected onto the axis and the overlap size is returned if there is one.\n * @method testSepAxis\n * @param {Vec3} axis\n * @param {ConvexPolyhedron} hullB\n * @param {Vec3} posA\n * @param {Quaternion} quatA\n * @param {Vec3} posB\n * @param {Quaternion} quatB\n * @return {number} The overlap depth, or FALSE if no penetration.\n */\nConvexPolyhedron.prototype.testSepAxis = function(axis, hullB, posA, quatA, posB, quatB){\n    var hullA=this;\n    ConvexPolyhedron.project(hullA, axis, posA, quatA, maxminA);\n    ConvexPolyhedron.project(hullB, axis, posB, quatB, maxminB);\n    var maxA = maxminA[0];\n    var minA = maxminA[1];\n    var maxB = maxminB[0];\n    var minB = maxminB[1];\n    if(maxA<minB || maxB<minA){\n        return false; // Separated\n    }\n    var d0 = maxA - minB;\n    var d1 = maxB - minA;\n    var depth = d0<d1 ? d0:d1;\n    return depth;\n};\n\nvar cli_aabbmin = new Vec3(),\n    cli_aabbmax = new Vec3();\n\n/**\n * @method calculateLocalInertia\n * @param  {Number} mass\n * @param  {Vec3} target\n */\nConvexPolyhedron.prototype.calculateLocalInertia = function(mass,target){\n    // Approximate with box inertia\n    // Exact inertia calculation is overkill, but see http://geometrictools.com/Documentation/PolyhedralMassProperties.pdf for the correct way to do it\n    this.computeLocalAABB(cli_aabbmin,cli_aabbmax);\n    var x = cli_aabbmax.x - cli_aabbmin.x,\n        y = cli_aabbmax.y - cli_aabbmin.y,\n        z = cli_aabbmax.z - cli_aabbmin.z;\n    target.x = 1.0 / 12.0 * mass * ( 2*y*2*y + 2*z*2*z );\n    target.y = 1.0 / 12.0 * mass * ( 2*x*2*x + 2*z*2*z );\n    target.z = 1.0 / 12.0 * mass * ( 2*y*2*y + 2*x*2*x );\n};\n\n/**\n * @method getPlaneConstantOfFace\n * @param  {Number} face_i Index of the face\n * @return {Number}\n */\nConvexPolyhedron.prototype.getPlaneConstantOfFace = function(face_i){\n    var f = this.faces[face_i];\n    var n = this.faceNormals[face_i];\n    var v = this.vertices[f[0]];\n    var c = -n.dot(v);\n    return c;\n};\n\n/**\n * Clip a face against a hull.\n * @method clipFaceAgainstHull\n * @param {Vec3} separatingNormal\n * @param {Vec3} posA\n * @param {Quaternion} quatA\n * @param {Array} worldVertsB1 An array of Vec3 with vertices in the world frame.\n * @param {Number} minDist Distance clamping\n * @param {Number} maxDist\n * @param Array result Array to store resulting contact points in. Will be objects with properties: point, depth, normal. These are represented in world coordinates.\n */\nvar cfah_faceANormalWS = new Vec3(),\n    cfah_edge0 = new Vec3(),\n    cfah_WorldEdge0 = new Vec3(),\n    cfah_worldPlaneAnormal1 = new Vec3(),\n    cfah_planeNormalWS1 = new Vec3(),\n    cfah_worldA1 = new Vec3(),\n    cfah_localPlaneNormal = new Vec3(),\n    cfah_planeNormalWS = new Vec3();\nConvexPolyhedron.prototype.clipFaceAgainstHull = function(separatingNormal, posA, quatA, worldVertsB1, minDist, maxDist,result){\n    var faceANormalWS = cfah_faceANormalWS,\n        edge0 = cfah_edge0,\n        WorldEdge0 = cfah_WorldEdge0,\n        worldPlaneAnormal1 = cfah_worldPlaneAnormal1,\n        planeNormalWS1 = cfah_planeNormalWS1,\n        worldA1 = cfah_worldA1,\n        localPlaneNormal = cfah_localPlaneNormal,\n        planeNormalWS = cfah_planeNormalWS;\n\n    var hullA = this;\n    var worldVertsB2 = [];\n    var pVtxIn = worldVertsB1;\n    var pVtxOut = worldVertsB2;\n    // Find the face with normal closest to the separating axis\n    var closestFaceA = -1;\n    var dmin = Number.MAX_VALUE;\n    for(var face=0; face<hullA.faces.length; face++){\n        faceANormalWS.copy(hullA.faceNormals[face]);\n        quatA.vmult(faceANormalWS,faceANormalWS);\n        //posA.vadd(faceANormalWS,faceANormalWS);\n        var d = faceANormalWS.dot(separatingNormal);\n        if (d < dmin){\n            dmin = d;\n            closestFaceA = face;\n        }\n    }\n    if (closestFaceA < 0){\n        // console.log(\"--- did not find any closest face... ---\");\n        return;\n    }\n    //console.log(\"closest A: \",closestFaceA);\n    // Get the face and construct connected faces\n    var polyA = hullA.faces[closestFaceA];\n    polyA.connectedFaces = [];\n    for(var i=0; i<hullA.faces.length; i++){\n        for(var j=0; j<hullA.faces[i].length; j++){\n            if(polyA.indexOf(hullA.faces[i][j])!==-1 /* Sharing a vertex*/ && i!==closestFaceA /* Not the one we are looking for connections from */ && polyA.connectedFaces.indexOf(i)===-1 /* Not already added */ ){\n                polyA.connectedFaces.push(i);\n            }\n        }\n    }\n    // Clip the polygon to the back of the planes of all faces of hull A, that are adjacent to the witness face\n    var numContacts = pVtxIn.length;\n    var numVerticesA = polyA.length;\n    var res = [];\n    for(var e0=0; e0<numVerticesA; e0++){\n        var a = hullA.vertices[polyA[e0]];\n        var b = hullA.vertices[polyA[(e0+1)%numVerticesA]];\n        a.vsub(b,edge0);\n        WorldEdge0.copy(edge0);\n        quatA.vmult(WorldEdge0,WorldEdge0);\n        posA.vadd(WorldEdge0,WorldEdge0);\n        worldPlaneAnormal1.copy(this.faceNormals[closestFaceA]);//transA.getBasis()* btVector3(polyA.m_plane[0],polyA.m_plane[1],polyA.m_plane[2]);\n        quatA.vmult(worldPlaneAnormal1,worldPlaneAnormal1);\n        posA.vadd(worldPlaneAnormal1,worldPlaneAnormal1);\n        WorldEdge0.cross(worldPlaneAnormal1,planeNormalWS1);\n        planeNormalWS1.negate(planeNormalWS1);\n        worldA1.copy(a);\n        quatA.vmult(worldA1,worldA1);\n        posA.vadd(worldA1,worldA1);\n        var planeEqWS1 = -worldA1.dot(planeNormalWS1);\n        var planeEqWS;\n        if(true){\n            var otherFace = polyA.connectedFaces[e0];\n            localPlaneNormal.copy(this.faceNormals[otherFace]);\n            var localPlaneEq = this.getPlaneConstantOfFace(otherFace);\n\n            planeNormalWS.copy(localPlaneNormal);\n            quatA.vmult(planeNormalWS,planeNormalWS);\n            //posA.vadd(planeNormalWS,planeNormalWS);\n            var planeEqWS = localPlaneEq - planeNormalWS.dot(posA);\n        } else  {\n            planeNormalWS.copy(planeNormalWS1);\n            planeEqWS = planeEqWS1;\n        }\n\n        // Clip face against our constructed plane\n        this.clipFaceAgainstPlane(pVtxIn, pVtxOut, planeNormalWS, planeEqWS);\n\n        // Throw away all clipped points, but save the reamining until next clip\n        while(pVtxIn.length){\n            pVtxIn.shift();\n        }\n        while(pVtxOut.length){\n            pVtxIn.push(pVtxOut.shift());\n        }\n    }\n\n    //console.log(\"Resulting points after clip:\",pVtxIn);\n\n    // only keep contact points that are behind the witness face\n    localPlaneNormal.copy(this.faceNormals[closestFaceA]);\n\n    var localPlaneEq = this.getPlaneConstantOfFace(closestFaceA);\n    planeNormalWS.copy(localPlaneNormal);\n    quatA.vmult(planeNormalWS,planeNormalWS);\n\n    var planeEqWS = localPlaneEq - planeNormalWS.dot(posA);\n    for (var i=0; i<pVtxIn.length; i++){\n        var depth = planeNormalWS.dot(pVtxIn[i]) + planeEqWS; //???\n        /*console.log(\"depth calc from normal=\",planeNormalWS.toString(),\" and constant \"+planeEqWS+\" and vertex \",pVtxIn[i].toString(),\" gives \"+depth);*/\n        if (depth <=minDist){\n            console.log(\"clamped: depth=\"+depth+\" to minDist=\"+(minDist+\"\"));\n            depth = minDist;\n        }\n\n        if (depth <=maxDist){\n            var point = pVtxIn[i];\n            if(depth<=0){\n                /*console.log(\"Got contact point \",point.toString(),\n                  \", depth=\",depth,\n                  \"contact normal=\",separatingNormal.toString(),\n                  \"plane\",planeNormalWS.toString(),\n                  \"planeConstant\",planeEqWS);*/\n                var p = {\n                    point:point,\n                    normal:planeNormalWS,\n                    depth: depth,\n                };\n                result.push(p);\n            }\n        }\n    }\n};\n\n/**\n * Clip a face in a hull against the back of a plane.\n * @method clipFaceAgainstPlane\n * @param {Array} inVertices\n * @param {Array} outVertices\n * @param {Vec3} planeNormal\n * @param {Number} planeConstant The constant in the mathematical plane equation\n */\nConvexPolyhedron.prototype.clipFaceAgainstPlane = function(inVertices,outVertices, planeNormal, planeConstant){\n    var n_dot_first, n_dot_last;\n    var numVerts = inVertices.length;\n\n    if(numVerts < 2){\n        return outVertices;\n    }\n\n    var firstVertex = inVertices[inVertices.length-1],\n        lastVertex =   inVertices[0];\n\n    n_dot_first = planeNormal.dot(firstVertex) + planeConstant;\n\n    for(var vi = 0; vi < numVerts; vi++){\n        lastVertex = inVertices[vi];\n        n_dot_last = planeNormal.dot(lastVertex) + planeConstant;\n        if(n_dot_first < 0){\n            if(n_dot_last < 0){\n                // Start < 0, end < 0, so output lastVertex\n                var newv = new Vec3();\n                newv.copy(lastVertex);\n                outVertices.push(newv);\n            } else {\n                // Start < 0, end >= 0, so output intersection\n                var newv = new Vec3();\n                firstVertex.lerp(lastVertex,\n                                 n_dot_first / (n_dot_first - n_dot_last),\n                                 newv);\n                outVertices.push(newv);\n            }\n        } else {\n            if(n_dot_last<0){\n                // Start >= 0, end < 0 so output intersection and end\n                var newv = new Vec3();\n                firstVertex.lerp(lastVertex,\n                                 n_dot_first / (n_dot_first - n_dot_last),\n                                 newv);\n                outVertices.push(newv);\n                outVertices.push(lastVertex);\n            }\n        }\n        firstVertex = lastVertex;\n        n_dot_first = n_dot_last;\n    }\n    return outVertices;\n};\n\n// Updates .worldVertices and sets .worldVerticesNeedsUpdate to false.\nConvexPolyhedron.prototype.computeWorldVertices = function(position,quat){\n    var N = this.vertices.length;\n    while(this.worldVertices.length < N){\n        this.worldVertices.push( new Vec3() );\n    }\n\n    var verts = this.vertices,\n        worldVerts = this.worldVertices;\n    for(var i=0; i!==N; i++){\n        quat.vmult( verts[i] , worldVerts[i] );\n        position.vadd( worldVerts[i] , worldVerts[i] );\n    }\n\n    this.worldVerticesNeedsUpdate = false;\n};\n\nvar computeLocalAABB_worldVert = new Vec3();\nConvexPolyhedron.prototype.computeLocalAABB = function(aabbmin,aabbmax){\n    var n = this.vertices.length,\n        vertices = this.vertices,\n        worldVert = computeLocalAABB_worldVert;\n\n    aabbmin.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n    aabbmax.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n\n    for(var i=0; i<n; i++){\n        var v = vertices[i];\n        if     (v.x < aabbmin.x){\n            aabbmin.x = v.x;\n        } else if(v.x > aabbmax.x){\n            aabbmax.x = v.x;\n        }\n        if     (v.y < aabbmin.y){\n            aabbmin.y = v.y;\n        } else if(v.y > aabbmax.y){\n            aabbmax.y = v.y;\n        }\n        if     (v.z < aabbmin.z){\n            aabbmin.z = v.z;\n        } else if(v.z > aabbmax.z){\n            aabbmax.z = v.z;\n        }\n    }\n};\n\n/**\n * Updates .worldVertices and sets .worldVerticesNeedsUpdate to false.\n * @method computeWorldFaceNormals\n * @param  {Quaternion} quat\n */\nConvexPolyhedron.prototype.computeWorldFaceNormals = function(quat){\n    var N = this.faceNormals.length;\n    while(this.worldFaceNormals.length < N){\n        this.worldFaceNormals.push( new Vec3() );\n    }\n\n    var normals = this.faceNormals,\n        worldNormals = this.worldFaceNormals;\n    for(var i=0; i!==N; i++){\n        quat.vmult( normals[i] , worldNormals[i] );\n    }\n\n    this.worldFaceNormalsNeedsUpdate = false;\n};\n\n/**\n * @method updateBoundingSphereRadius\n */\nConvexPolyhedron.prototype.updateBoundingSphereRadius = function(){\n    // Assume points are distributed with local (0,0,0) as center\n    var max2 = 0;\n    var verts = this.vertices;\n    for(var i=0, N=verts.length; i!==N; i++) {\n        var norm2 = verts[i].norm2();\n        if(norm2 > max2){\n            max2 = norm2;\n        }\n    }\n    this.boundingSphereRadius = Math.sqrt(max2);\n};\n\nvar tempWorldVertex = new Vec3();\n\n/**\n * @method calculateWorldAABB\n * @param {Vec3}        pos\n * @param {Quaternion}  quat\n * @param {Vec3}        min\n * @param {Vec3}        max\n */\nConvexPolyhedron.prototype.calculateWorldAABB = function(pos,quat,min,max){\n    var n = this.vertices.length, verts = this.vertices;\n    var minx,miny,minz,maxx,maxy,maxz;\n    for(var i=0; i<n; i++){\n        tempWorldVertex.copy(verts[i]);\n        quat.vmult(tempWorldVertex,tempWorldVertex);\n        pos.vadd(tempWorldVertex,tempWorldVertex);\n        var v = tempWorldVertex;\n        if     (v.x < minx || minx===undefined){\n            minx = v.x;\n        } else if(v.x > maxx || maxx===undefined){\n            maxx = v.x;\n        }\n\n        if     (v.y < miny || miny===undefined){\n            miny = v.y;\n        } else if(v.y > maxy || maxy===undefined){\n            maxy = v.y;\n        }\n\n        if     (v.z < minz || minz===undefined){\n            minz = v.z;\n        } else if(v.z > maxz || maxz===undefined){\n            maxz = v.z;\n        }\n    }\n    min.set(minx,miny,minz);\n    max.set(maxx,maxy,maxz);\n};\n\n/**\n * Get approximate convex volume\n * @method volume\n * @return {Number}\n */\nConvexPolyhedron.prototype.volume = function(){\n    return 4.0 * Math.PI * this.boundingSphereRadius / 3.0;\n};\n\n/**\n * Get an average of all the vertices positions\n * @method getAveragePointLocal\n * @param  {Vec3} target\n * @return {Vec3}\n */\nConvexPolyhedron.prototype.getAveragePointLocal = function(target){\n    target = target || new Vec3();\n    var n = this.vertices.length,\n        verts = this.vertices;\n    for(var i=0; i<n; i++){\n        target.vadd(verts[i],target);\n    }\n    target.mult(1/n,target);\n    return target;\n};\n\n/**\n * Transform all local points. Will change the .vertices\n * @method transformAllPoints\n * @param  {Vec3} offset\n * @param  {Quaternion} quat\n */\nConvexPolyhedron.prototype.transformAllPoints = function(offset,quat){\n    var n = this.vertices.length,\n        verts = this.vertices;\n\n    // Apply rotation\n    if(quat){\n        // Rotate vertices\n        for(var i=0; i<n; i++){\n            var v = verts[i];\n            quat.vmult(v,v);\n        }\n        // Rotate face normals\n        for(var i=0; i<this.faceNormals.length; i++){\n            var v = this.faceNormals[i];\n            quat.vmult(v,v);\n        }\n        /*\n        // Rotate edges\n        for(var i=0; i<this.uniqueEdges.length; i++){\n            var v = this.uniqueEdges[i];\n            quat.vmult(v,v);\n        }*/\n    }\n\n    // Apply offset\n    if(offset){\n        for(var i=0; i<n; i++){\n            var v = verts[i];\n            v.vadd(offset,v);\n        }\n    }\n};\n\n/**\n * Checks whether p is inside the polyhedra. Must be in local coords. The point lies outside of the convex hull of the other points if and only if the direction of all the vectors from it to those other points are on less than one half of a sphere around it.\n * @method pointIsInside\n * @param  {Vec3} p      A point given in local coordinates\n * @return {Boolean}\n */\nvar ConvexPolyhedron_pointIsInside = new Vec3();\nvar ConvexPolyhedron_vToP = new Vec3();\nvar ConvexPolyhedron_vToPointInside = new Vec3();\nConvexPolyhedron.prototype.pointIsInside = function(p){\n    var n = this.vertices.length,\n        verts = this.vertices,\n        faces = this.faces,\n        normals = this.faceNormals;\n    var positiveResult = null;\n    var N = this.faces.length;\n    var pointInside = ConvexPolyhedron_pointIsInside;\n    this.getAveragePointLocal(pointInside);\n    for(var i=0; i<N; i++){\n        var numVertices = this.faces[i].length;\n        var n = normals[i];\n        var v = verts[faces[i][0]]; // We only need one point in the face\n\n        // This dot product determines which side of the edge the point is\n        var vToP = ConvexPolyhedron_vToP;\n        p.vsub(v,vToP);\n        var r1 = n.dot(vToP);\n\n        var vToPointInside = ConvexPolyhedron_vToPointInside;\n        pointInside.vsub(v,vToPointInside);\n        var r2 = n.dot(vToPointInside);\n\n        if((r1<0 && r2>0) || (r1>0 && r2<0)){\n            return false; // Encountered some other sign. Exit.\n        } else {\n        }\n    }\n\n    // If we got here, all dot products were of the same sign.\n    return positiveResult ? 1 : -1;\n};\n\n/**\n * Get max and min dot product of a convex hull at position (pos,quat) projected onto an axis. Results are saved in the array maxmin.\n * @static\n * @method project\n * @param {ConvexPolyhedron} hull\n * @param {Vec3} axis\n * @param {Vec3} pos\n * @param {Quaternion} quat\n * @param {array} result result[0] and result[1] will be set to maximum and minimum, respectively.\n */\nvar project_worldVertex = new Vec3();\nvar project_localAxis = new Vec3();\nvar project_localOrigin = new Vec3();\nConvexPolyhedron.project = function(hull, axis, pos, quat, result){\n    var n = hull.vertices.length,\n        worldVertex = project_worldVertex,\n        localAxis = project_localAxis,\n        max = 0,\n        min = 0,\n        localOrigin = project_localOrigin,\n        vs = hull.vertices;\n\n    localOrigin.setZero();\n\n    // Transform the axis to local\n    Transform.vectorToLocalFrame(pos, quat, axis, localAxis);\n    Transform.pointToLocalFrame(pos, quat, localOrigin, localOrigin);\n    var add = localOrigin.dot(localAxis);\n\n    min = max = vs[0].dot(localAxis);\n\n    for(var i = 1; i < n; i++){\n        var val = vs[i].dot(localAxis);\n\n        if(val > max){\n            max = val;\n        }\n\n        if(val < min){\n            min = val;\n        }\n    }\n\n    min -= add;\n    max -= add;\n\n    if(min > max){\n        // Inconsistent - swap\n        var temp = min;\n        min = max;\n        max = temp;\n    }\n    // Output\n    result[0] = max;\n    result[1] = min;\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":458,"column":0},"generated":{"line":458,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":459,"column":0},"generated":{"line":459,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":460,"column":0},"generated":{"line":460,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":461,"column":0},"generated":{"line":461,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":462,"column":0},"generated":{"line":462,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":463,"column":0},"generated":{"line":463,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":464,"column":0},"generated":{"line":464,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":465,"column":0},"generated":{"line":465,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":466,"column":0},"generated":{"line":466,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":467,"column":0},"generated":{"line":467,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":468,"column":0},"generated":{"line":468,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":469,"column":0},"generated":{"line":469,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":470,"column":0},"generated":{"line":470,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":471,"column":0},"generated":{"line":471,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":472,"column":0},"generated":{"line":472,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":473,"column":0},"generated":{"line":473,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":474,"column":0},"generated":{"line":474,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":475,"column":0},"generated":{"line":475,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":476,"column":0},"generated":{"line":476,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":477,"column":0},"generated":{"line":477,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":478,"column":0},"generated":{"line":478,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":479,"column":0},"generated":{"line":479,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":480,"column":0},"generated":{"line":480,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":481,"column":0},"generated":{"line":481,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":482,"column":0},"generated":{"line":482,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":483,"column":0},"generated":{"line":483,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":484,"column":0},"generated":{"line":484,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":485,"column":0},"generated":{"line":485,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":486,"column":0},"generated":{"line":486,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":487,"column":0},"generated":{"line":487,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":488,"column":0},"generated":{"line":488,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":489,"column":0},"generated":{"line":489,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":490,"column":0},"generated":{"line":490,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":491,"column":0},"generated":{"line":491,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":492,"column":0},"generated":{"line":492,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":493,"column":0},"generated":{"line":493,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":494,"column":0},"generated":{"line":494,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":495,"column":0},"generated":{"line":495,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":496,"column":0},"generated":{"line":496,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":497,"column":0},"generated":{"line":497,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":498,"column":0},"generated":{"line":498,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":499,"column":0},"generated":{"line":499,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":500,"column":0},"generated":{"line":500,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":501,"column":0},"generated":{"line":501,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":502,"column":0},"generated":{"line":502,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":503,"column":0},"generated":{"line":503,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":504,"column":0},"generated":{"line":504,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":505,"column":0},"generated":{"line":505,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":506,"column":0},"generated":{"line":506,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":507,"column":0},"generated":{"line":507,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":508,"column":0},"generated":{"line":508,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":509,"column":0},"generated":{"line":509,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":510,"column":0},"generated":{"line":510,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":511,"column":0},"generated":{"line":511,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":512,"column":0},"generated":{"line":512,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":513,"column":0},"generated":{"line":513,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":514,"column":0},"generated":{"line":514,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":515,"column":0},"generated":{"line":515,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":516,"column":0},"generated":{"line":516,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":517,"column":0},"generated":{"line":517,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":518,"column":0},"generated":{"line":518,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":519,"column":0},"generated":{"line":519,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":520,"column":0},"generated":{"line":520,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":521,"column":0},"generated":{"line":521,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":522,"column":0},"generated":{"line":522,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":523,"column":0},"generated":{"line":523,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":524,"column":0},"generated":{"line":524,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":525,"column":0},"generated":{"line":525,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":526,"column":0},"generated":{"line":526,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":527,"column":0},"generated":{"line":527,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":528,"column":0},"generated":{"line":528,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":529,"column":0},"generated":{"line":529,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":530,"column":0},"generated":{"line":530,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":531,"column":0},"generated":{"line":531,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":532,"column":0},"generated":{"line":532,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":533,"column":0},"generated":{"line":533,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":534,"column":0},"generated":{"line":534,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":535,"column":0},"generated":{"line":535,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":536,"column":0},"generated":{"line":536,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":537,"column":0},"generated":{"line":537,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":538,"column":0},"generated":{"line":538,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":539,"column":0},"generated":{"line":539,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":540,"column":0},"generated":{"line":540,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":541,"column":0},"generated":{"line":541,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":542,"column":0},"generated":{"line":542,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":543,"column":0},"generated":{"line":543,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":544,"column":0},"generated":{"line":544,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":545,"column":0},"generated":{"line":545,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":546,"column":0},"generated":{"line":546,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":547,"column":0},"generated":{"line":547,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":548,"column":0},"generated":{"line":548,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":549,"column":0},"generated":{"line":549,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":550,"column":0},"generated":{"line":550,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":551,"column":0},"generated":{"line":551,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":552,"column":0},"generated":{"line":552,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":553,"column":0},"generated":{"line":553,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":554,"column":0},"generated":{"line":554,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":555,"column":0},"generated":{"line":555,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":556,"column":0},"generated":{"line":556,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":557,"column":0},"generated":{"line":557,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":558,"column":0},"generated":{"line":558,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":559,"column":0},"generated":{"line":559,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":560,"column":0},"generated":{"line":560,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":561,"column":0},"generated":{"line":561,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":562,"column":0},"generated":{"line":562,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":563,"column":0},"generated":{"line":563,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":564,"column":0},"generated":{"line":564,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":565,"column":0},"generated":{"line":565,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":566,"column":0},"generated":{"line":566,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":567,"column":0},"generated":{"line":567,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":568,"column":0},"generated":{"line":568,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":569,"column":0},"generated":{"line":569,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":570,"column":0},"generated":{"line":570,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":571,"column":0},"generated":{"line":571,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":572,"column":0},"generated":{"line":572,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":573,"column":0},"generated":{"line":573,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":574,"column":0},"generated":{"line":574,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":575,"column":0},"generated":{"line":575,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":576,"column":0},"generated":{"line":576,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":577,"column":0},"generated":{"line":577,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":578,"column":0},"generated":{"line":578,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":579,"column":0},"generated":{"line":579,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":580,"column":0},"generated":{"line":580,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":581,"column":0},"generated":{"line":581,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":582,"column":0},"generated":{"line":582,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":583,"column":0},"generated":{"line":583,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":584,"column":0},"generated":{"line":584,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":585,"column":0},"generated":{"line":585,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":586,"column":0},"generated":{"line":586,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":587,"column":0},"generated":{"line":587,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":588,"column":0},"generated":{"line":588,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":589,"column":0},"generated":{"line":589,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":590,"column":0},"generated":{"line":590,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":591,"column":0},"generated":{"line":591,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":592,"column":0},"generated":{"line":592,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":593,"column":0},"generated":{"line":593,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":594,"column":0},"generated":{"line":594,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":595,"column":0},"generated":{"line":595,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":596,"column":0},"generated":{"line":596,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":597,"column":0},"generated":{"line":597,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":598,"column":0},"generated":{"line":598,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":599,"column":0},"generated":{"line":599,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":600,"column":0},"generated":{"line":600,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":601,"column":0},"generated":{"line":601,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":602,"column":0},"generated":{"line":602,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":603,"column":0},"generated":{"line":603,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":604,"column":0},"generated":{"line":604,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":605,"column":0},"generated":{"line":605,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":606,"column":0},"generated":{"line":606,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":607,"column":0},"generated":{"line":607,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":608,"column":0},"generated":{"line":608,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":609,"column":0},"generated":{"line":609,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":610,"column":0},"generated":{"line":610,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":611,"column":0},"generated":{"line":611,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":612,"column":0},"generated":{"line":612,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":613,"column":0},"generated":{"line":613,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":614,"column":0},"generated":{"line":614,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":615,"column":0},"generated":{"line":615,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":616,"column":0},"generated":{"line":616,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":617,"column":0},"generated":{"line":617,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":618,"column":0},"generated":{"line":618,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":619,"column":0},"generated":{"line":619,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":620,"column":0},"generated":{"line":620,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":621,"column":0},"generated":{"line":621,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":622,"column":0},"generated":{"line":622,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":623,"column":0},"generated":{"line":623,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":624,"column":0},"generated":{"line":624,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":625,"column":0},"generated":{"line":625,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":626,"column":0},"generated":{"line":626,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":627,"column":0},"generated":{"line":627,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":628,"column":0},"generated":{"line":628,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":629,"column":0},"generated":{"line":629,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":630,"column":0},"generated":{"line":630,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":631,"column":0},"generated":{"line":631,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":632,"column":0},"generated":{"line":632,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":633,"column":0},"generated":{"line":633,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":634,"column":0},"generated":{"line":634,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":635,"column":0},"generated":{"line":635,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":636,"column":0},"generated":{"line":636,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":637,"column":0},"generated":{"line":637,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":638,"column":0},"generated":{"line":638,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":639,"column":0},"generated":{"line":639,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":640,"column":0},"generated":{"line":640,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":641,"column":0},"generated":{"line":641,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":642,"column":0},"generated":{"line":642,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":643,"column":0},"generated":{"line":643,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":644,"column":0},"generated":{"line":644,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":645,"column":0},"generated":{"line":645,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":646,"column":0},"generated":{"line":646,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":647,"column":0},"generated":{"line":647,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":648,"column":0},"generated":{"line":648,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":649,"column":0},"generated":{"line":649,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":650,"column":0},"generated":{"line":650,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":651,"column":0},"generated":{"line":651,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":652,"column":0},"generated":{"line":652,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":653,"column":0},"generated":{"line":653,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":654,"column":0},"generated":{"line":654,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":655,"column":0},"generated":{"line":655,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":656,"column":0},"generated":{"line":656,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":657,"column":0},"generated":{"line":657,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":658,"column":0},"generated":{"line":658,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":659,"column":0},"generated":{"line":659,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":660,"column":0},"generated":{"line":660,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":661,"column":0},"generated":{"line":661,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":662,"column":0},"generated":{"line":662,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":663,"column":0},"generated":{"line":663,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":664,"column":0},"generated":{"line":664,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":665,"column":0},"generated":{"line":665,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":666,"column":0},"generated":{"line":666,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":667,"column":0},"generated":{"line":667,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":668,"column":0},"generated":{"line":668,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":669,"column":0},"generated":{"line":669,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":670,"column":0},"generated":{"line":670,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":671,"column":0},"generated":{"line":671,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":672,"column":0},"generated":{"line":672,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":673,"column":0},"generated":{"line":673,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":674,"column":0},"generated":{"line":674,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":675,"column":0},"generated":{"line":675,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":676,"column":0},"generated":{"line":676,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":677,"column":0},"generated":{"line":677,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":678,"column":0},"generated":{"line":678,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":679,"column":0},"generated":{"line":679,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":680,"column":0},"generated":{"line":680,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":681,"column":0},"generated":{"line":681,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":682,"column":0},"generated":{"line":682,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":683,"column":0},"generated":{"line":683,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":684,"column":0},"generated":{"line":684,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":685,"column":0},"generated":{"line":685,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":686,"column":0},"generated":{"line":686,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":687,"column":0},"generated":{"line":687,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":688,"column":0},"generated":{"line":688,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":689,"column":0},"generated":{"line":689,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":690,"column":0},"generated":{"line":690,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":691,"column":0},"generated":{"line":691,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":692,"column":0},"generated":{"line":692,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":693,"column":0},"generated":{"line":693,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":694,"column":0},"generated":{"line":694,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":695,"column":0},"generated":{"line":695,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":696,"column":0},"generated":{"line":696,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":697,"column":0},"generated":{"line":697,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":698,"column":0},"generated":{"line":698,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":699,"column":0},"generated":{"line":699,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":700,"column":0},"generated":{"line":700,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":701,"column":0},"generated":{"line":701,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":702,"column":0},"generated":{"line":702,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":703,"column":0},"generated":{"line":703,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":704,"column":0},"generated":{"line":704,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":705,"column":0},"generated":{"line":705,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":706,"column":0},"generated":{"line":706,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":707,"column":0},"generated":{"line":707,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":708,"column":0},"generated":{"line":708,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":709,"column":0},"generated":{"line":709,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":710,"column":0},"generated":{"line":710,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":711,"column":0},"generated":{"line":711,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":712,"column":0},"generated":{"line":712,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":713,"column":0},"generated":{"line":713,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":714,"column":0},"generated":{"line":714,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":715,"column":0},"generated":{"line":715,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":716,"column":0},"generated":{"line":716,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":717,"column":0},"generated":{"line":717,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":718,"column":0},"generated":{"line":718,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":719,"column":0},"generated":{"line":719,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":720,"column":0},"generated":{"line":720,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":721,"column":0},"generated":{"line":721,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":722,"column":0},"generated":{"line":722,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":723,"column":0},"generated":{"line":723,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":724,"column":0},"generated":{"line":724,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":725,"column":0},"generated":{"line":725,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":726,"column":0},"generated":{"line":726,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":727,"column":0},"generated":{"line":727,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":728,"column":0},"generated":{"line":728,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":729,"column":0},"generated":{"line":729,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":730,"column":0},"generated":{"line":730,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":731,"column":0},"generated":{"line":731,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":732,"column":0},"generated":{"line":732,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":733,"column":0},"generated":{"line":733,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":734,"column":0},"generated":{"line":734,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":735,"column":0},"generated":{"line":735,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":736,"column":0},"generated":{"line":736,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":737,"column":0},"generated":{"line":737,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":738,"column":0},"generated":{"line":738,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":739,"column":0},"generated":{"line":739,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":740,"column":0},"generated":{"line":740,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":741,"column":0},"generated":{"line":741,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":742,"column":0},"generated":{"line":742,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":743,"column":0},"generated":{"line":743,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":744,"column":0},"generated":{"line":744,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":745,"column":0},"generated":{"line":745,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":746,"column":0},"generated":{"line":746,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":747,"column":0},"generated":{"line":747,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":748,"column":0},"generated":{"line":748,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":749,"column":0},"generated":{"line":749,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":750,"column":0},"generated":{"line":750,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":751,"column":0},"generated":{"line":751,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":752,"column":0},"generated":{"line":752,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":753,"column":0},"generated":{"line":753,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":754,"column":0},"generated":{"line":754,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":755,"column":0},"generated":{"line":755,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":756,"column":0},"generated":{"line":756,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":757,"column":0},"generated":{"line":757,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":758,"column":0},"generated":{"line":758,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":759,"column":0},"generated":{"line":759,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":760,"column":0},"generated":{"line":760,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":761,"column":0},"generated":{"line":761,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":762,"column":0},"generated":{"line":762,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":763,"column":0},"generated":{"line":763,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":764,"column":0},"generated":{"line":764,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":765,"column":0},"generated":{"line":765,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":766,"column":0},"generated":{"line":766,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":767,"column":0},"generated":{"line":767,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":768,"column":0},"generated":{"line":768,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":769,"column":0},"generated":{"line":769,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":770,"column":0},"generated":{"line":770,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":771,"column":0},"generated":{"line":771,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":772,"column":0},"generated":{"line":772,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":773,"column":0},"generated":{"line":773,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":774,"column":0},"generated":{"line":774,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":775,"column":0},"generated":{"line":775,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":776,"column":0},"generated":{"line":776,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":777,"column":0},"generated":{"line":777,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":778,"column":0},"generated":{"line":778,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":779,"column":0},"generated":{"line":779,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":780,"column":0},"generated":{"line":780,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":781,"column":0},"generated":{"line":781,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":782,"column":0},"generated":{"line":782,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":783,"column":0},"generated":{"line":783,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":784,"column":0},"generated":{"line":784,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":785,"column":0},"generated":{"line":785,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":786,"column":0},"generated":{"line":786,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":787,"column":0},"generated":{"line":787,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":788,"column":0},"generated":{"line":788,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":789,"column":0},"generated":{"line":789,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":790,"column":0},"generated":{"line":790,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":791,"column":0},"generated":{"line":791,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":792,"column":0},"generated":{"line":792,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":793,"column":0},"generated":{"line":793,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":794,"column":0},"generated":{"line":794,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":795,"column":0},"generated":{"line":795,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":796,"column":0},"generated":{"line":796,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":797,"column":0},"generated":{"line":797,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":798,"column":0},"generated":{"line":798,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":799,"column":0},"generated":{"line":799,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":800,"column":0},"generated":{"line":800,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":801,"column":0},"generated":{"line":801,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":802,"column":0},"generated":{"line":802,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":803,"column":0},"generated":{"line":803,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":804,"column":0},"generated":{"line":804,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":805,"column":0},"generated":{"line":805,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":806,"column":0},"generated":{"line":806,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":807,"column":0},"generated":{"line":807,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":808,"column":0},"generated":{"line":808,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":809,"column":0},"generated":{"line":809,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":810,"column":0},"generated":{"line":810,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":811,"column":0},"generated":{"line":811,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":812,"column":0},"generated":{"line":812,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":813,"column":0},"generated":{"line":813,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":814,"column":0},"generated":{"line":814,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":815,"column":0},"generated":{"line":815,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":816,"column":0},"generated":{"line":816,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":817,"column":0},"generated":{"line":817,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":818,"column":0},"generated":{"line":818,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":819,"column":0},"generated":{"line":819,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":820,"column":0},"generated":{"line":820,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":821,"column":0},"generated":{"line":821,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":822,"column":0},"generated":{"line":822,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":823,"column":0},"generated":{"line":823,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":824,"column":0},"generated":{"line":824,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":825,"column":0},"generated":{"line":825,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":826,"column":0},"generated":{"line":826,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":827,"column":0},"generated":{"line":827,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":828,"column":0},"generated":{"line":828,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":829,"column":0},"generated":{"line":829,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":830,"column":0},"generated":{"line":830,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":831,"column":0},"generated":{"line":831,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":832,"column":0},"generated":{"line":832,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":833,"column":0},"generated":{"line":833,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":834,"column":0},"generated":{"line":834,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":835,"column":0},"generated":{"line":835,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":836,"column":0},"generated":{"line":836,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":837,"column":0},"generated":{"line":837,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":838,"column":0},"generated":{"line":838,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":839,"column":0},"generated":{"line":839,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":840,"column":0},"generated":{"line":840,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":841,"column":0},"generated":{"line":841,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":842,"column":0},"generated":{"line":842,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":843,"column":0},"generated":{"line":843,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":844,"column":0},"generated":{"line":844,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":845,"column":0},"generated":{"line":845,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":846,"column":0},"generated":{"line":846,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":847,"column":0},"generated":{"line":847,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":848,"column":0},"generated":{"line":848,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":849,"column":0},"generated":{"line":849,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":850,"column":0},"generated":{"line":850,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":851,"column":0},"generated":{"line":851,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":852,"column":0},"generated":{"line":852,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":853,"column":0},"generated":{"line":853,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":854,"column":0},"generated":{"line":854,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":855,"column":0},"generated":{"line":855,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":856,"column":0},"generated":{"line":856,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":857,"column":0},"generated":{"line":857,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":858,"column":0},"generated":{"line":858,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":859,"column":0},"generated":{"line":859,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":860,"column":0},"generated":{"line":860,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":861,"column":0},"generated":{"line":861,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":862,"column":0},"generated":{"line":862,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":863,"column":0},"generated":{"line":863,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":864,"column":0},"generated":{"line":864,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":865,"column":0},"generated":{"line":865,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":866,"column":0},"generated":{"line":866,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":867,"column":0},"generated":{"line":867,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":868,"column":0},"generated":{"line":868,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":869,"column":0},"generated":{"line":869,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":870,"column":0},"generated":{"line":870,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":871,"column":0},"generated":{"line":871,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":872,"column":0},"generated":{"line":872,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":873,"column":0},"generated":{"line":873,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":874,"column":0},"generated":{"line":874,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":875,"column":0},"generated":{"line":875,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":876,"column":0},"generated":{"line":876,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":877,"column":0},"generated":{"line":877,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":878,"column":0},"generated":{"line":878,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":879,"column":0},"generated":{"line":879,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":880,"column":0},"generated":{"line":880,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":881,"column":0},"generated":{"line":881,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":882,"column":0},"generated":{"line":882,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":883,"column":0},"generated":{"line":883,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":884,"column":0},"generated":{"line":884,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":885,"column":0},"generated":{"line":885,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":886,"column":0},"generated":{"line":886,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":887,"column":0},"generated":{"line":887,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":888,"column":0},"generated":{"line":888,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":889,"column":0},"generated":{"line":889,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":890,"column":0},"generated":{"line":890,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":891,"column":0},"generated":{"line":891,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":892,"column":0},"generated":{"line":892,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":893,"column":0},"generated":{"line":893,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":894,"column":0},"generated":{"line":894,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":895,"column":0},"generated":{"line":895,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":896,"column":0},"generated":{"line":896,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":897,"column":0},"generated":{"line":897,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":898,"column":0},"generated":{"line":898,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":899,"column":0},"generated":{"line":899,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":900,"column":0},"generated":{"line":900,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":901,"column":0},"generated":{"line":901,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":902,"column":0},"generated":{"line":902,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":903,"column":0},"generated":{"line":903,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":904,"column":0},"generated":{"line":904,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":905,"column":0},"generated":{"line":905,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":906,"column":0},"generated":{"line":906,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":907,"column":0},"generated":{"line":907,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":908,"column":0},"generated":{"line":908,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":909,"column":0},"generated":{"line":909,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":910,"column":0},"generated":{"line":910,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":911,"column":0},"generated":{"line":911,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":912,"column":0},"generated":{"line":912,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":913,"column":0},"generated":{"line":913,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":914,"column":0},"generated":{"line":914,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":915,"column":0},"generated":{"line":915,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":916,"column":0},"generated":{"line":916,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":917,"column":0},"generated":{"line":917,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":918,"column":0},"generated":{"line":918,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":919,"column":0},"generated":{"line":919,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":920,"column":0},"generated":{"line":920,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":921,"column":0},"generated":{"line":921,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":922,"column":0},"generated":{"line":922,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":923,"column":0},"generated":{"line":923,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":924,"column":0},"generated":{"line":924,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":925,"column":0},"generated":{"line":925,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":926,"column":0},"generated":{"line":926,"column":0}},{"source":"../node_modules/cannon/src/shapes/ConvexPolyhedron.js","original":{"line":927,"column":0},"generated":{"line":927,"column":0}}],"sources":{"../node_modules/cannon/src/shapes/ConvexPolyhedron.js":"module.exports = ConvexPolyhedron;\n\nvar Shape = require('./Shape');\nvar Vec3 = require('../math/Vec3');\nvar Quaternion = require('../math/Quaternion');\nvar Transform = require('../math/Transform');\n\n/**\n * A set of polygons describing a convex shape.\n * @class ConvexPolyhedron\n * @constructor\n * @extends Shape\n * @description The shape MUST be convex for the code to work properly. No polygons may be coplanar (contained\n * in the same 3D plane), instead these should be merged into one polygon.\n *\n * @param {array} points An array of Vec3's\n * @param {array} faces Array of integer arrays, describing which vertices that is included in each face.\n *\n * @author qiao / https://github.com/qiao (original author, see https://github.com/qiao/three.js/commit/85026f0c769e4000148a67d45a9e9b9c5108836f)\n * @author schteppe / https://github.com/schteppe\n * @see http://www.altdevblogaday.com/2011/05/13/contact-generation-between-3d-convex-meshes/\n * @see http://bullet.googlecode.com/svn/trunk/src/BulletCollision/NarrowPhaseCollision/btPolyhedralContactClipping.cpp\n *\n * @todo Move the clipping functions to ContactGenerator?\n * @todo Automatically merge coplanar polygons in constructor.\n */\nfunction ConvexPolyhedron(points, faces, uniqueAxes) {\n    Shape.call(this, {\n        type: Shape.types.CONVEXPOLYHEDRON\n    });\n\n    /**\n     * Array of Vec3\n     * @property vertices\n     * @type {Array}\n     */\n    this.vertices = points||[];\n\n    this.worldVertices = []; // World transformed version of .vertices\n    this.worldVerticesNeedsUpdate = true;\n\n    /**\n     * Array of integer arrays, indicating which vertices each face consists of\n     * @property faces\n     * @type {Array}\n     */\n    this.faces = faces||[];\n\n    /**\n     * Array of Vec3\n     * @property faceNormals\n     * @type {Array}\n     */\n    this.faceNormals = [];\n    this.computeNormals();\n\n    this.worldFaceNormalsNeedsUpdate = true;\n    this.worldFaceNormals = []; // World transformed version of .faceNormals\n\n    /**\n     * Array of Vec3\n     * @property uniqueEdges\n     * @type {Array}\n     */\n    this.uniqueEdges = [];\n\n    /**\n     * If given, these locally defined, normalized axes are the only ones being checked when doing separating axis check.\n     * @property {Array} uniqueAxes\n     */\n    this.uniqueAxes = uniqueAxes ? uniqueAxes.slice() : null;\n\n    this.computeEdges();\n    this.updateBoundingSphereRadius();\n}\nConvexPolyhedron.prototype = new Shape();\nConvexPolyhedron.prototype.constructor = ConvexPolyhedron;\n\nvar computeEdges_tmpEdge = new Vec3();\n/**\n * Computes uniqueEdges\n * @method computeEdges\n */\nConvexPolyhedron.prototype.computeEdges = function(){\n    var faces = this.faces;\n    var vertices = this.vertices;\n    var nv = vertices.length;\n    var edges = this.uniqueEdges;\n\n    edges.length = 0;\n\n    var edge = computeEdges_tmpEdge;\n\n    for(var i=0; i !== faces.length; i++){\n        var face = faces[i];\n        var numVertices = face.length;\n        for(var j = 0; j !== numVertices; j++){\n            var k = ( j+1 ) % numVertices;\n            vertices[face[j]].vsub(vertices[face[k]], edge);\n            edge.normalize();\n            var found = false;\n            for(var p=0; p !== edges.length; p++){\n                if (edges[p].almostEquals(edge) || edges[p].almostEquals(edge)){\n                    found = true;\n                    break;\n                }\n            }\n\n            if (!found){\n                edges.push(edge.clone());\n            }\n        }\n    }\n};\n\n/**\n * Compute the normals of the faces. Will reuse existing Vec3 objects in the .faceNormals array if they exist.\n * @method computeNormals\n */\nConvexPolyhedron.prototype.computeNormals = function(){\n    this.faceNormals.length = this.faces.length;\n\n    // Generate normals\n    for(var i=0; i<this.faces.length; i++){\n\n        // Check so all vertices exists for this face\n        for(var j=0; j<this.faces[i].length; j++){\n            if(!this.vertices[this.faces[i][j]]){\n                throw new Error(\"Vertex \"+this.faces[i][j]+\" not found!\");\n            }\n        }\n\n        var n = this.faceNormals[i] || new Vec3();\n        this.getFaceNormal(i,n);\n        n.negate(n);\n        this.faceNormals[i] = n;\n        var vertex = this.vertices[this.faces[i][0]];\n        if(n.dot(vertex) < 0){\n            console.error(\".faceNormals[\" + i + \"] = Vec3(\"+n.toString()+\") looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule.\");\n            for(var j=0; j<this.faces[i].length; j++){\n                console.warn(\".vertices[\"+this.faces[i][j]+\"] = Vec3(\"+this.vertices[this.faces[i][j]].toString()+\")\");\n            }\n        }\n    }\n};\n\n/**\n * Get face normal given 3 vertices\n * @static\n * @method getFaceNormal\n * @param {Vec3} va\n * @param {Vec3} vb\n * @param {Vec3} vc\n * @param {Vec3} target\n */\nvar cb = new Vec3();\nvar ab = new Vec3();\nConvexPolyhedron.computeNormal = function ( va, vb, vc, target ) {\n    vb.vsub(va,ab);\n    vc.vsub(vb,cb);\n    cb.cross(ab,target);\n    if ( !target.isZero() ) {\n        target.normalize();\n    }\n};\n\n/**\n * Compute the normal of a face from its vertices\n * @method getFaceNormal\n * @param  {Number} i\n * @param  {Vec3} target\n */\nConvexPolyhedron.prototype.getFaceNormal = function(i,target){\n    var f = this.faces[i];\n    var va = this.vertices[f[0]];\n    var vb = this.vertices[f[1]];\n    var vc = this.vertices[f[2]];\n    return ConvexPolyhedron.computeNormal(va,vb,vc,target);\n};\n\n/**\n * @method clipAgainstHull\n * @param {Vec3} posA\n * @param {Quaternion} quatA\n * @param {ConvexPolyhedron} hullB\n * @param {Vec3} posB\n * @param {Quaternion} quatB\n * @param {Vec3} separatingNormal\n * @param {Number} minDist Clamp distance\n * @param {Number} maxDist\n * @param {array} result The an array of contact point objects, see clipFaceAgainstHull\n * @see http://bullet.googlecode.com/svn/trunk/src/BulletCollision/NarrowPhaseCollision/btPolyhedralContactClipping.cpp\n */\nvar cah_WorldNormal = new Vec3();\nConvexPolyhedron.prototype.clipAgainstHull = function(posA,quatA,hullB,posB,quatB,separatingNormal,minDist,maxDist,result){\n    var WorldNormal = cah_WorldNormal;\n    var hullA = this;\n    var curMaxDist = maxDist;\n    var closestFaceB = -1;\n    var dmax = -Number.MAX_VALUE;\n    for(var face=0; face < hullB.faces.length; face++){\n        WorldNormal.copy(hullB.faceNormals[face]);\n        quatB.vmult(WorldNormal,WorldNormal);\n        //posB.vadd(WorldNormal,WorldNormal);\n        var d = WorldNormal.dot(separatingNormal);\n        if (d > dmax){\n            dmax = d;\n            closestFaceB = face;\n        }\n    }\n    var worldVertsB1 = [];\n    var polyB = hullB.faces[closestFaceB];\n    var numVertices = polyB.length;\n    for(var e0=0; e0<numVertices; e0++){\n        var b = hullB.vertices[polyB[e0]];\n        var worldb = new Vec3();\n        worldb.copy(b);\n        quatB.vmult(worldb,worldb);\n        posB.vadd(worldb,worldb);\n        worldVertsB1.push(worldb);\n    }\n\n    if (closestFaceB>=0){\n        this.clipFaceAgainstHull(separatingNormal,\n                                 posA,\n                                 quatA,\n                                 worldVertsB1,\n                                 minDist,\n                                 maxDist,\n                                 result);\n    }\n};\n\n/**\n * Find the separating axis between this hull and another\n * @method findSeparatingAxis\n * @param {ConvexPolyhedron} hullB\n * @param {Vec3} posA\n * @param {Quaternion} quatA\n * @param {Vec3} posB\n * @param {Quaternion} quatB\n * @param {Vec3} target The target vector to save the axis in\n * @return {bool} Returns false if a separation is found, else true\n */\nvar fsa_faceANormalWS3 = new Vec3(),\n    fsa_Worldnormal1 = new Vec3(),\n    fsa_deltaC = new Vec3(),\n    fsa_worldEdge0 = new Vec3(),\n    fsa_worldEdge1 = new Vec3(),\n    fsa_Cross = new Vec3();\nConvexPolyhedron.prototype.findSeparatingAxis = function(hullB,posA,quatA,posB,quatB,target, faceListA, faceListB){\n    var faceANormalWS3 = fsa_faceANormalWS3,\n        Worldnormal1 = fsa_Worldnormal1,\n        deltaC = fsa_deltaC,\n        worldEdge0 = fsa_worldEdge0,\n        worldEdge1 = fsa_worldEdge1,\n        Cross = fsa_Cross;\n\n    var dmin = Number.MAX_VALUE;\n    var hullA = this;\n    var curPlaneTests=0;\n\n    if(!hullA.uniqueAxes){\n\n        var numFacesA = faceListA ? faceListA.length : hullA.faces.length;\n\n        // Test face normals from hullA\n        for(var i=0; i<numFacesA; i++){\n            var fi = faceListA ? faceListA[i] : i;\n\n            // Get world face normal\n            faceANormalWS3.copy(hullA.faceNormals[fi]);\n            quatA.vmult(faceANormalWS3,faceANormalWS3);\n\n            var d = hullA.testSepAxis(faceANormalWS3, hullB, posA, quatA, posB, quatB);\n            if(d===false){\n                return false;\n            }\n\n            if(d<dmin){\n                dmin = d;\n                target.copy(faceANormalWS3);\n            }\n        }\n\n    } else {\n\n        // Test unique axes\n        for(var i = 0; i !== hullA.uniqueAxes.length; i++){\n\n            // Get world axis\n            quatA.vmult(hullA.uniqueAxes[i],faceANormalWS3);\n\n            var d = hullA.testSepAxis(faceANormalWS3, hullB, posA, quatA, posB, quatB);\n            if(d===false){\n                return false;\n            }\n\n            if(d<dmin){\n                dmin = d;\n                target.copy(faceANormalWS3);\n            }\n        }\n    }\n\n    if(!hullB.uniqueAxes){\n\n        // Test face normals from hullB\n        var numFacesB = faceListB ? faceListB.length : hullB.faces.length;\n        for(var i=0;i<numFacesB;i++){\n\n            var fi = faceListB ? faceListB[i] : i;\n\n            Worldnormal1.copy(hullB.faceNormals[fi]);\n            quatB.vmult(Worldnormal1,Worldnormal1);\n            curPlaneTests++;\n            var d = hullA.testSepAxis(Worldnormal1, hullB,posA,quatA,posB,quatB);\n            if(d===false){\n                return false;\n            }\n\n            if(d<dmin){\n                dmin = d;\n                target.copy(Worldnormal1);\n            }\n        }\n    } else {\n\n        // Test unique axes in B\n        for(var i = 0; i !== hullB.uniqueAxes.length; i++){\n            quatB.vmult(hullB.uniqueAxes[i],Worldnormal1);\n\n            curPlaneTests++;\n            var d = hullA.testSepAxis(Worldnormal1, hullB,posA,quatA,posB,quatB);\n            if(d===false){\n                return false;\n            }\n\n            if(d<dmin){\n                dmin = d;\n                target.copy(Worldnormal1);\n            }\n        }\n    }\n\n    // Test edges\n    for(var e0=0; e0 !== hullA.uniqueEdges.length; e0++){\n\n        // Get world edge\n        quatA.vmult(hullA.uniqueEdges[e0],worldEdge0);\n\n        for(var e1=0; e1 !== hullB.uniqueEdges.length; e1++){\n\n            // Get world edge 2\n            quatB.vmult(hullB.uniqueEdges[e1], worldEdge1);\n            worldEdge0.cross(worldEdge1,Cross);\n\n            if(!Cross.almostZero()){\n                Cross.normalize();\n                var dist = hullA.testSepAxis(Cross, hullB, posA, quatA, posB, quatB);\n                if(dist === false){\n                    return false;\n                }\n                if(dist < dmin){\n                    dmin = dist;\n                    target.copy(Cross);\n                }\n            }\n        }\n    }\n\n    posB.vsub(posA,deltaC);\n    if((deltaC.dot(target))>0.0){\n        target.negate(target);\n    }\n\n    return true;\n};\n\nvar maxminA=[], maxminB=[];\n\n/**\n * Test separating axis against two hulls. Both hulls are projected onto the axis and the overlap size is returned if there is one.\n * @method testSepAxis\n * @param {Vec3} axis\n * @param {ConvexPolyhedron} hullB\n * @param {Vec3} posA\n * @param {Quaternion} quatA\n * @param {Vec3} posB\n * @param {Quaternion} quatB\n * @return {number} The overlap depth, or FALSE if no penetration.\n */\nConvexPolyhedron.prototype.testSepAxis = function(axis, hullB, posA, quatA, posB, quatB){\n    var hullA=this;\n    ConvexPolyhedron.project(hullA, axis, posA, quatA, maxminA);\n    ConvexPolyhedron.project(hullB, axis, posB, quatB, maxminB);\n    var maxA = maxminA[0];\n    var minA = maxminA[1];\n    var maxB = maxminB[0];\n    var minB = maxminB[1];\n    if(maxA<minB || maxB<minA){\n        return false; // Separated\n    }\n    var d0 = maxA - minB;\n    var d1 = maxB - minA;\n    var depth = d0<d1 ? d0:d1;\n    return depth;\n};\n\nvar cli_aabbmin = new Vec3(),\n    cli_aabbmax = new Vec3();\n\n/**\n * @method calculateLocalInertia\n * @param  {Number} mass\n * @param  {Vec3} target\n */\nConvexPolyhedron.prototype.calculateLocalInertia = function(mass,target){\n    // Approximate with box inertia\n    // Exact inertia calculation is overkill, but see http://geometrictools.com/Documentation/PolyhedralMassProperties.pdf for the correct way to do it\n    this.computeLocalAABB(cli_aabbmin,cli_aabbmax);\n    var x = cli_aabbmax.x - cli_aabbmin.x,\n        y = cli_aabbmax.y - cli_aabbmin.y,\n        z = cli_aabbmax.z - cli_aabbmin.z;\n    target.x = 1.0 / 12.0 * mass * ( 2*y*2*y + 2*z*2*z );\n    target.y = 1.0 / 12.0 * mass * ( 2*x*2*x + 2*z*2*z );\n    target.z = 1.0 / 12.0 * mass * ( 2*y*2*y + 2*x*2*x );\n};\n\n/**\n * @method getPlaneConstantOfFace\n * @param  {Number} face_i Index of the face\n * @return {Number}\n */\nConvexPolyhedron.prototype.getPlaneConstantOfFace = function(face_i){\n    var f = this.faces[face_i];\n    var n = this.faceNormals[face_i];\n    var v = this.vertices[f[0]];\n    var c = -n.dot(v);\n    return c;\n};\n\n/**\n * Clip a face against a hull.\n * @method clipFaceAgainstHull\n * @param {Vec3} separatingNormal\n * @param {Vec3} posA\n * @param {Quaternion} quatA\n * @param {Array} worldVertsB1 An array of Vec3 with vertices in the world frame.\n * @param {Number} minDist Distance clamping\n * @param {Number} maxDist\n * @param Array result Array to store resulting contact points in. Will be objects with properties: point, depth, normal. These are represented in world coordinates.\n */\nvar cfah_faceANormalWS = new Vec3(),\n    cfah_edge0 = new Vec3(),\n    cfah_WorldEdge0 = new Vec3(),\n    cfah_worldPlaneAnormal1 = new Vec3(),\n    cfah_planeNormalWS1 = new Vec3(),\n    cfah_worldA1 = new Vec3(),\n    cfah_localPlaneNormal = new Vec3(),\n    cfah_planeNormalWS = new Vec3();\nConvexPolyhedron.prototype.clipFaceAgainstHull = function(separatingNormal, posA, quatA, worldVertsB1, minDist, maxDist,result){\n    var faceANormalWS = cfah_faceANormalWS,\n        edge0 = cfah_edge0,\n        WorldEdge0 = cfah_WorldEdge0,\n        worldPlaneAnormal1 = cfah_worldPlaneAnormal1,\n        planeNormalWS1 = cfah_planeNormalWS1,\n        worldA1 = cfah_worldA1,\n        localPlaneNormal = cfah_localPlaneNormal,\n        planeNormalWS = cfah_planeNormalWS;\n\n    var hullA = this;\n    var worldVertsB2 = [];\n    var pVtxIn = worldVertsB1;\n    var pVtxOut = worldVertsB2;\n    // Find the face with normal closest to the separating axis\n    var closestFaceA = -1;\n    var dmin = Number.MAX_VALUE;\n    for(var face=0; face<hullA.faces.length; face++){\n        faceANormalWS.copy(hullA.faceNormals[face]);\n        quatA.vmult(faceANormalWS,faceANormalWS);\n        //posA.vadd(faceANormalWS,faceANormalWS);\n        var d = faceANormalWS.dot(separatingNormal);\n        if (d < dmin){\n            dmin = d;\n            closestFaceA = face;\n        }\n    }\n    if (closestFaceA < 0){\n        // console.log(\"--- did not find any closest face... ---\");\n        return;\n    }\n    //console.log(\"closest A: \",closestFaceA);\n    // Get the face and construct connected faces\n    var polyA = hullA.faces[closestFaceA];\n    polyA.connectedFaces = [];\n    for(var i=0; i<hullA.faces.length; i++){\n        for(var j=0; j<hullA.faces[i].length; j++){\n            if(polyA.indexOf(hullA.faces[i][j])!==-1 /* Sharing a vertex*/ && i!==closestFaceA /* Not the one we are looking for connections from */ && polyA.connectedFaces.indexOf(i)===-1 /* Not already added */ ){\n                polyA.connectedFaces.push(i);\n            }\n        }\n    }\n    // Clip the polygon to the back of the planes of all faces of hull A, that are adjacent to the witness face\n    var numContacts = pVtxIn.length;\n    var numVerticesA = polyA.length;\n    var res = [];\n    for(var e0=0; e0<numVerticesA; e0++){\n        var a = hullA.vertices[polyA[e0]];\n        var b = hullA.vertices[polyA[(e0+1)%numVerticesA]];\n        a.vsub(b,edge0);\n        WorldEdge0.copy(edge0);\n        quatA.vmult(WorldEdge0,WorldEdge0);\n        posA.vadd(WorldEdge0,WorldEdge0);\n        worldPlaneAnormal1.copy(this.faceNormals[closestFaceA]);//transA.getBasis()* btVector3(polyA.m_plane[0],polyA.m_plane[1],polyA.m_plane[2]);\n        quatA.vmult(worldPlaneAnormal1,worldPlaneAnormal1);\n        posA.vadd(worldPlaneAnormal1,worldPlaneAnormal1);\n        WorldEdge0.cross(worldPlaneAnormal1,planeNormalWS1);\n        planeNormalWS1.negate(planeNormalWS1);\n        worldA1.copy(a);\n        quatA.vmult(worldA1,worldA1);\n        posA.vadd(worldA1,worldA1);\n        var planeEqWS1 = -worldA1.dot(planeNormalWS1);\n        var planeEqWS;\n        if(true){\n            var otherFace = polyA.connectedFaces[e0];\n            localPlaneNormal.copy(this.faceNormals[otherFace]);\n            var localPlaneEq = this.getPlaneConstantOfFace(otherFace);\n\n            planeNormalWS.copy(localPlaneNormal);\n            quatA.vmult(planeNormalWS,planeNormalWS);\n            //posA.vadd(planeNormalWS,planeNormalWS);\n            var planeEqWS = localPlaneEq - planeNormalWS.dot(posA);\n        } else  {\n            planeNormalWS.copy(planeNormalWS1);\n            planeEqWS = planeEqWS1;\n        }\n\n        // Clip face against our constructed plane\n        this.clipFaceAgainstPlane(pVtxIn, pVtxOut, planeNormalWS, planeEqWS);\n\n        // Throw away all clipped points, but save the reamining until next clip\n        while(pVtxIn.length){\n            pVtxIn.shift();\n        }\n        while(pVtxOut.length){\n            pVtxIn.push(pVtxOut.shift());\n        }\n    }\n\n    //console.log(\"Resulting points after clip:\",pVtxIn);\n\n    // only keep contact points that are behind the witness face\n    localPlaneNormal.copy(this.faceNormals[closestFaceA]);\n\n    var localPlaneEq = this.getPlaneConstantOfFace(closestFaceA);\n    planeNormalWS.copy(localPlaneNormal);\n    quatA.vmult(planeNormalWS,planeNormalWS);\n\n    var planeEqWS = localPlaneEq - planeNormalWS.dot(posA);\n    for (var i=0; i<pVtxIn.length; i++){\n        var depth = planeNormalWS.dot(pVtxIn[i]) + planeEqWS; //???\n        /*console.log(\"depth calc from normal=\",planeNormalWS.toString(),\" and constant \"+planeEqWS+\" and vertex \",pVtxIn[i].toString(),\" gives \"+depth);*/\n        if (depth <=minDist){\n            console.log(\"clamped: depth=\"+depth+\" to minDist=\"+(minDist+\"\"));\n            depth = minDist;\n        }\n\n        if (depth <=maxDist){\n            var point = pVtxIn[i];\n            if(depth<=0){\n                /*console.log(\"Got contact point \",point.toString(),\n                  \", depth=\",depth,\n                  \"contact normal=\",separatingNormal.toString(),\n                  \"plane\",planeNormalWS.toString(),\n                  \"planeConstant\",planeEqWS);*/\n                var p = {\n                    point:point,\n                    normal:planeNormalWS,\n                    depth: depth,\n                };\n                result.push(p);\n            }\n        }\n    }\n};\n\n/**\n * Clip a face in a hull against the back of a plane.\n * @method clipFaceAgainstPlane\n * @param {Array} inVertices\n * @param {Array} outVertices\n * @param {Vec3} planeNormal\n * @param {Number} planeConstant The constant in the mathematical plane equation\n */\nConvexPolyhedron.prototype.clipFaceAgainstPlane = function(inVertices,outVertices, planeNormal, planeConstant){\n    var n_dot_first, n_dot_last;\n    var numVerts = inVertices.length;\n\n    if(numVerts < 2){\n        return outVertices;\n    }\n\n    var firstVertex = inVertices[inVertices.length-1],\n        lastVertex =   inVertices[0];\n\n    n_dot_first = planeNormal.dot(firstVertex) + planeConstant;\n\n    for(var vi = 0; vi < numVerts; vi++){\n        lastVertex = inVertices[vi];\n        n_dot_last = planeNormal.dot(lastVertex) + planeConstant;\n        if(n_dot_first < 0){\n            if(n_dot_last < 0){\n                // Start < 0, end < 0, so output lastVertex\n                var newv = new Vec3();\n                newv.copy(lastVertex);\n                outVertices.push(newv);\n            } else {\n                // Start < 0, end >= 0, so output intersection\n                var newv = new Vec3();\n                firstVertex.lerp(lastVertex,\n                                 n_dot_first / (n_dot_first - n_dot_last),\n                                 newv);\n                outVertices.push(newv);\n            }\n        } else {\n            if(n_dot_last<0){\n                // Start >= 0, end < 0 so output intersection and end\n                var newv = new Vec3();\n                firstVertex.lerp(lastVertex,\n                                 n_dot_first / (n_dot_first - n_dot_last),\n                                 newv);\n                outVertices.push(newv);\n                outVertices.push(lastVertex);\n            }\n        }\n        firstVertex = lastVertex;\n        n_dot_first = n_dot_last;\n    }\n    return outVertices;\n};\n\n// Updates .worldVertices and sets .worldVerticesNeedsUpdate to false.\nConvexPolyhedron.prototype.computeWorldVertices = function(position,quat){\n    var N = this.vertices.length;\n    while(this.worldVertices.length < N){\n        this.worldVertices.push( new Vec3() );\n    }\n\n    var verts = this.vertices,\n        worldVerts = this.worldVertices;\n    for(var i=0; i!==N; i++){\n        quat.vmult( verts[i] , worldVerts[i] );\n        position.vadd( worldVerts[i] , worldVerts[i] );\n    }\n\n    this.worldVerticesNeedsUpdate = false;\n};\n\nvar computeLocalAABB_worldVert = new Vec3();\nConvexPolyhedron.prototype.computeLocalAABB = function(aabbmin,aabbmax){\n    var n = this.vertices.length,\n        vertices = this.vertices,\n        worldVert = computeLocalAABB_worldVert;\n\n    aabbmin.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n    aabbmax.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n\n    for(var i=0; i<n; i++){\n        var v = vertices[i];\n        if     (v.x < aabbmin.x){\n            aabbmin.x = v.x;\n        } else if(v.x > aabbmax.x){\n            aabbmax.x = v.x;\n        }\n        if     (v.y < aabbmin.y){\n            aabbmin.y = v.y;\n        } else if(v.y > aabbmax.y){\n            aabbmax.y = v.y;\n        }\n        if     (v.z < aabbmin.z){\n            aabbmin.z = v.z;\n        } else if(v.z > aabbmax.z){\n            aabbmax.z = v.z;\n        }\n    }\n};\n\n/**\n * Updates .worldVertices and sets .worldVerticesNeedsUpdate to false.\n * @method computeWorldFaceNormals\n * @param  {Quaternion} quat\n */\nConvexPolyhedron.prototype.computeWorldFaceNormals = function(quat){\n    var N = this.faceNormals.length;\n    while(this.worldFaceNormals.length < N){\n        this.worldFaceNormals.push( new Vec3() );\n    }\n\n    var normals = this.faceNormals,\n        worldNormals = this.worldFaceNormals;\n    for(var i=0; i!==N; i++){\n        quat.vmult( normals[i] , worldNormals[i] );\n    }\n\n    this.worldFaceNormalsNeedsUpdate = false;\n};\n\n/**\n * @method updateBoundingSphereRadius\n */\nConvexPolyhedron.prototype.updateBoundingSphereRadius = function(){\n    // Assume points are distributed with local (0,0,0) as center\n    var max2 = 0;\n    var verts = this.vertices;\n    for(var i=0, N=verts.length; i!==N; i++) {\n        var norm2 = verts[i].norm2();\n        if(norm2 > max2){\n            max2 = norm2;\n        }\n    }\n    this.boundingSphereRadius = Math.sqrt(max2);\n};\n\nvar tempWorldVertex = new Vec3();\n\n/**\n * @method calculateWorldAABB\n * @param {Vec3}        pos\n * @param {Quaternion}  quat\n * @param {Vec3}        min\n * @param {Vec3}        max\n */\nConvexPolyhedron.prototype.calculateWorldAABB = function(pos,quat,min,max){\n    var n = this.vertices.length, verts = this.vertices;\n    var minx,miny,minz,maxx,maxy,maxz;\n    for(var i=0; i<n; i++){\n        tempWorldVertex.copy(verts[i]);\n        quat.vmult(tempWorldVertex,tempWorldVertex);\n        pos.vadd(tempWorldVertex,tempWorldVertex);\n        var v = tempWorldVertex;\n        if     (v.x < minx || minx===undefined){\n            minx = v.x;\n        } else if(v.x > maxx || maxx===undefined){\n            maxx = v.x;\n        }\n\n        if     (v.y < miny || miny===undefined){\n            miny = v.y;\n        } else if(v.y > maxy || maxy===undefined){\n            maxy = v.y;\n        }\n\n        if     (v.z < minz || minz===undefined){\n            minz = v.z;\n        } else if(v.z > maxz || maxz===undefined){\n            maxz = v.z;\n        }\n    }\n    min.set(minx,miny,minz);\n    max.set(maxx,maxy,maxz);\n};\n\n/**\n * Get approximate convex volume\n * @method volume\n * @return {Number}\n */\nConvexPolyhedron.prototype.volume = function(){\n    return 4.0 * Math.PI * this.boundingSphereRadius / 3.0;\n};\n\n/**\n * Get an average of all the vertices positions\n * @method getAveragePointLocal\n * @param  {Vec3} target\n * @return {Vec3}\n */\nConvexPolyhedron.prototype.getAveragePointLocal = function(target){\n    target = target || new Vec3();\n    var n = this.vertices.length,\n        verts = this.vertices;\n    for(var i=0; i<n; i++){\n        target.vadd(verts[i],target);\n    }\n    target.mult(1/n,target);\n    return target;\n};\n\n/**\n * Transform all local points. Will change the .vertices\n * @method transformAllPoints\n * @param  {Vec3} offset\n * @param  {Quaternion} quat\n */\nConvexPolyhedron.prototype.transformAllPoints = function(offset,quat){\n    var n = this.vertices.length,\n        verts = this.vertices;\n\n    // Apply rotation\n    if(quat){\n        // Rotate vertices\n        for(var i=0; i<n; i++){\n            var v = verts[i];\n            quat.vmult(v,v);\n        }\n        // Rotate face normals\n        for(var i=0; i<this.faceNormals.length; i++){\n            var v = this.faceNormals[i];\n            quat.vmult(v,v);\n        }\n        /*\n        // Rotate edges\n        for(var i=0; i<this.uniqueEdges.length; i++){\n            var v = this.uniqueEdges[i];\n            quat.vmult(v,v);\n        }*/\n    }\n\n    // Apply offset\n    if(offset){\n        for(var i=0; i<n; i++){\n            var v = verts[i];\n            v.vadd(offset,v);\n        }\n    }\n};\n\n/**\n * Checks whether p is inside the polyhedra. Must be in local coords. The point lies outside of the convex hull of the other points if and only if the direction of all the vectors from it to those other points are on less than one half of a sphere around it.\n * @method pointIsInside\n * @param  {Vec3} p      A point given in local coordinates\n * @return {Boolean}\n */\nvar ConvexPolyhedron_pointIsInside = new Vec3();\nvar ConvexPolyhedron_vToP = new Vec3();\nvar ConvexPolyhedron_vToPointInside = new Vec3();\nConvexPolyhedron.prototype.pointIsInside = function(p){\n    var n = this.vertices.length,\n        verts = this.vertices,\n        faces = this.faces,\n        normals = this.faceNormals;\n    var positiveResult = null;\n    var N = this.faces.length;\n    var pointInside = ConvexPolyhedron_pointIsInside;\n    this.getAveragePointLocal(pointInside);\n    for(var i=0; i<N; i++){\n        var numVertices = this.faces[i].length;\n        var n = normals[i];\n        var v = verts[faces[i][0]]; // We only need one point in the face\n\n        // This dot product determines which side of the edge the point is\n        var vToP = ConvexPolyhedron_vToP;\n        p.vsub(v,vToP);\n        var r1 = n.dot(vToP);\n\n        var vToPointInside = ConvexPolyhedron_vToPointInside;\n        pointInside.vsub(v,vToPointInside);\n        var r2 = n.dot(vToPointInside);\n\n        if((r1<0 && r2>0) || (r1>0 && r2<0)){\n            return false; // Encountered some other sign. Exit.\n        } else {\n        }\n    }\n\n    // If we got here, all dot products were of the same sign.\n    return positiveResult ? 1 : -1;\n};\n\n/**\n * Get max and min dot product of a convex hull at position (pos,quat) projected onto an axis. Results are saved in the array maxmin.\n * @static\n * @method project\n * @param {ConvexPolyhedron} hull\n * @param {Vec3} axis\n * @param {Vec3} pos\n * @param {Quaternion} quat\n * @param {array} result result[0] and result[1] will be set to maximum and minimum, respectively.\n */\nvar project_worldVertex = new Vec3();\nvar project_localAxis = new Vec3();\nvar project_localOrigin = new Vec3();\nConvexPolyhedron.project = function(hull, axis, pos, quat, result){\n    var n = hull.vertices.length,\n        worldVertex = project_worldVertex,\n        localAxis = project_localAxis,\n        max = 0,\n        min = 0,\n        localOrigin = project_localOrigin,\n        vs = hull.vertices;\n\n    localOrigin.setZero();\n\n    // Transform the axis to local\n    Transform.vectorToLocalFrame(pos, quat, axis, localAxis);\n    Transform.pointToLocalFrame(pos, quat, localOrigin, localOrigin);\n    var add = localOrigin.dot(localAxis);\n\n    min = max = vs[0].dot(localAxis);\n\n    for(var i = 1; i < n; i++){\n        var val = vs[i].dot(localAxis);\n\n        if(val > max){\n            max = val;\n        }\n\n        if(val < min){\n            min = val;\n        }\n    }\n\n    min -= add;\n    max -= add;\n\n    if(min > max){\n        // Inconsistent - swap\n        var temp = min;\n        min = max;\n        max = temp;\n    }\n    // Output\n    result[0] = max;\n    result[1] = min;\n};\n"},"lineCount":927}},"error":null,"hash":"2a6cd51b2020319e444bec394a79242c","cacheData":{"env":{}}}