{"id":"CqEM","dependencies":[{"name":"/Users/ashley/Documents/personal/JS/lens-studio-physics/package.json","includedInParent":true,"mtime":1572035175430},{"name":"/Users/ashley/Documents/personal/JS/lens-studio-physics/.babelrc","includedInParent":true,"mtime":1572035440174},{"name":"/Users/ashley/Documents/personal/JS/lens-studio-physics/node_modules/cannon/package.json","includedInParent":true,"mtime":1571074066777},{"name":"../math/Vec3","loc":{"line":3,"column":19},"parent":"/Users/ashley/Documents/personal/JS/lens-studio-physics/node_modules/cannon/src/collision/Ray.js","resolved":"/Users/ashley/Documents/personal/JS/lens-studio-physics/node_modules/cannon/src/math/Vec3.js"},{"name":"../math/Quaternion","loc":{"line":4,"column":25},"parent":"/Users/ashley/Documents/personal/JS/lens-studio-physics/node_modules/cannon/src/collision/Ray.js","resolved":"/Users/ashley/Documents/personal/JS/lens-studio-physics/node_modules/cannon/src/math/Quaternion.js"},{"name":"../math/Transform","loc":{"line":5,"column":24},"parent":"/Users/ashley/Documents/personal/JS/lens-studio-physics/node_modules/cannon/src/collision/Ray.js","resolved":"/Users/ashley/Documents/personal/JS/lens-studio-physics/node_modules/cannon/src/math/Transform.js"},{"name":"../shapes/ConvexPolyhedron","loc":{"line":6,"column":31},"parent":"/Users/ashley/Documents/personal/JS/lens-studio-physics/node_modules/cannon/src/collision/Ray.js","resolved":"/Users/ashley/Documents/personal/JS/lens-studio-physics/node_modules/cannon/src/shapes/ConvexPolyhedron.js"},{"name":"../shapes/Box","loc":{"line":7,"column":18},"parent":"/Users/ashley/Documents/personal/JS/lens-studio-physics/node_modules/cannon/src/collision/Ray.js","resolved":"/Users/ashley/Documents/personal/JS/lens-studio-physics/node_modules/cannon/src/shapes/Box.js"},{"name":"../collision/RaycastResult","loc":{"line":8,"column":28},"parent":"/Users/ashley/Documents/personal/JS/lens-studio-physics/node_modules/cannon/src/collision/Ray.js","resolved":"/Users/ashley/Documents/personal/JS/lens-studio-physics/node_modules/cannon/src/collision/RaycastResult.js"},{"name":"../shapes/Shape","loc":{"line":9,"column":20},"parent":"/Users/ashley/Documents/personal/JS/lens-studio-physics/node_modules/cannon/src/collision/Ray.js","resolved":"/Users/ashley/Documents/personal/JS/lens-studio-physics/node_modules/cannon/src/shapes/Shape.js"},{"name":"../collision/AABB","loc":{"line":10,"column":19},"parent":"/Users/ashley/Documents/personal/JS/lens-studio-physics/node_modules/cannon/src/collision/Ray.js","resolved":"/Users/ashley/Documents/personal/JS/lens-studio-physics/node_modules/cannon/src/collision/AABB.js"}],"generated":{"js":"module.exports = Ray;\n\nvar Vec3 = require('../math/Vec3');\nvar Quaternion = require('../math/Quaternion');\nvar Transform = require('../math/Transform');\nvar ConvexPolyhedron = require('../shapes/ConvexPolyhedron');\nvar Box = require('../shapes/Box');\nvar RaycastResult = require('../collision/RaycastResult');\nvar Shape = require('../shapes/Shape');\nvar AABB = require('../collision/AABB');\n\n/**\n * A line in 3D space that intersects bodies and return points.\n * @class Ray\n * @constructor\n * @param {Vec3} from\n * @param {Vec3} to\n */\nfunction Ray(from, to){\n    /**\n     * @property {Vec3} from\n     */\n    this.from = from ? from.clone() : new Vec3();\n\n    /**\n     * @property {Vec3} to\n     */\n    this.to = to ? to.clone() : new Vec3();\n\n    /**\n     * @private\n     * @property {Vec3} _direction\n     */\n    this._direction = new Vec3();\n\n    /**\n     * The precision of the ray. Used when checking parallelity etc.\n     * @property {Number} precision\n     */\n    this.precision = 0.0001;\n\n    /**\n     * Set to true if you want the Ray to take .collisionResponse flags into account on bodies and shapes.\n     * @property {Boolean} checkCollisionResponse\n     */\n    this.checkCollisionResponse = true;\n\n    /**\n     * If set to true, the ray skips any hits with normal.dot(rayDirection) < 0.\n     * @property {Boolean} skipBackfaces\n     */\n    this.skipBackfaces = false;\n\n    /**\n     * @property {number} collisionFilterMask\n     * @default -1\n     */\n    this.collisionFilterMask = -1;\n\n    /**\n     * @property {number} collisionFilterGroup\n     * @default -1\n     */\n    this.collisionFilterGroup = -1;\n\n    /**\n     * The intersection mode. Should be Ray.ANY, Ray.ALL or Ray.CLOSEST.\n     * @property {number} mode\n     */\n    this.mode = Ray.ANY;\n\n    /**\n     * Current result object.\n     * @property {RaycastResult} result\n     */\n    this.result = new RaycastResult();\n\n    /**\n     * Will be set to true during intersectWorld() if the ray hit anything.\n     * @property {Boolean} hasHit\n     */\n    this.hasHit = false;\n\n    /**\n     * Current, user-provided result callback. Will be used if mode is Ray.ALL.\n     * @property {Function} callback\n     */\n    this.callback = function(result){};\n}\nRay.prototype.constructor = Ray;\n\nRay.CLOSEST = 1;\nRay.ANY = 2;\nRay.ALL = 4;\n\nvar tmpAABB = new AABB();\nvar tmpArray = [];\n\n/**\n * Do itersection against all bodies in the given World.\n * @method intersectWorld\n * @param  {World} world\n * @param  {object} options\n * @return {Boolean} True if the ray hit anything, otherwise false.\n */\nRay.prototype.intersectWorld = function (world, options) {\n    this.mode = options.mode || Ray.ANY;\n    this.result = options.result || new RaycastResult();\n    this.skipBackfaces = !!options.skipBackfaces;\n    this.collisionFilterMask = typeof(options.collisionFilterMask) !== 'undefined' ? options.collisionFilterMask : -1;\n    this.collisionFilterGroup = typeof(options.collisionFilterGroup) !== 'undefined' ? options.collisionFilterGroup : -1;\n    if(options.from){\n        this.from.copy(options.from);\n    }\n    if(options.to){\n        this.to.copy(options.to);\n    }\n    this.callback = options.callback || function(){};\n    this.hasHit = false;\n\n    this.result.reset();\n    this._updateDirection();\n\n    this.getAABB(tmpAABB);\n    tmpArray.length = 0;\n    world.broadphase.aabbQuery(world, tmpAABB, tmpArray);\n    this.intersectBodies(tmpArray);\n\n    return this.hasHit;\n};\n\nvar v1 = new Vec3(),\n    v2 = new Vec3();\n\n/*\n * As per \"Barycentric Technique\" as named here http://www.blackpawn.com/texts/pointinpoly/default.html But without the division\n */\nRay.pointInTriangle = pointInTriangle;\nfunction pointInTriangle(p, a, b, c) {\n    c.vsub(a,v0);\n    b.vsub(a,v1);\n    p.vsub(a,v2);\n\n    var dot00 = v0.dot( v0 );\n    var dot01 = v0.dot( v1 );\n    var dot02 = v0.dot( v2 );\n    var dot11 = v1.dot( v1 );\n    var dot12 = v1.dot( v2 );\n\n    var u,v;\n\n    return  ( (u = dot11 * dot02 - dot01 * dot12) >= 0 ) &&\n            ( (v = dot00 * dot12 - dot01 * dot02) >= 0 ) &&\n            ( u + v < ( dot00 * dot11 - dot01 * dot01 ) );\n}\n\n/**\n * Shoot a ray at a body, get back information about the hit.\n * @method intersectBody\n * @private\n * @param {Body} body\n * @param {RaycastResult} [result] Deprecated - set the result property of the Ray instead.\n */\nvar intersectBody_xi = new Vec3();\nvar intersectBody_qi = new Quaternion();\nRay.prototype.intersectBody = function (body, result) {\n    if(result){\n        this.result = result;\n        this._updateDirection();\n    }\n    var checkCollisionResponse = this.checkCollisionResponse;\n\n    if(checkCollisionResponse && !body.collisionResponse){\n        return;\n    }\n\n    if((this.collisionFilterGroup & body.collisionFilterMask)===0 || (body.collisionFilterGroup & this.collisionFilterMask)===0){\n        return;\n    }\n\n    var xi = intersectBody_xi;\n    var qi = intersectBody_qi;\n\n    for (var i = 0, N = body.shapes.length; i < N; i++) {\n        var shape = body.shapes[i];\n\n        if(checkCollisionResponse && !shape.collisionResponse){\n            continue; // Skip\n        }\n\n        body.quaternion.mult(body.shapeOrientations[i], qi);\n        body.quaternion.vmult(body.shapeOffsets[i], xi);\n        xi.vadd(body.position, xi);\n\n        this.intersectShape(\n            shape,\n            qi,\n            xi,\n            body\n        );\n\n        if(this.result._shouldStop){\n            break;\n        }\n    }\n};\n\n/**\n * @method intersectBodies\n * @param {Array} bodies An array of Body objects.\n * @param {RaycastResult} [result] Deprecated\n */\nRay.prototype.intersectBodies = function (bodies, result) {\n    if(result){\n        this.result = result;\n        this._updateDirection();\n    }\n\n    for ( var i = 0, l = bodies.length; !this.result._shouldStop && i < l; i ++ ) {\n        this.intersectBody(bodies[i]);\n    }\n};\n\n/**\n * Updates the _direction vector.\n * @private\n * @method _updateDirection\n */\nRay.prototype._updateDirection = function(){\n    this.to.vsub(this.from, this._direction);\n    this._direction.normalize();\n};\n\n/**\n * @method intersectShape\n * @private\n * @param {Shape} shape\n * @param {Quaternion} quat\n * @param {Vec3} position\n * @param {Body} body\n */\nRay.prototype.intersectShape = function(shape, quat, position, body){\n    var from = this.from;\n\n\n    // Checking boundingSphere\n    var distance = distanceFromIntersection(from, this._direction, position);\n    if ( distance > shape.boundingSphereRadius ) {\n        return;\n    }\n\n    var intersectMethod = this[shape.type];\n    if(intersectMethod){\n        intersectMethod.call(this, shape, quat, position, body, shape);\n    }\n};\n\nvar vector = new Vec3();\nvar normal = new Vec3();\nvar intersectPoint = new Vec3();\n\nvar a = new Vec3();\nvar b = new Vec3();\nvar c = new Vec3();\nvar d = new Vec3();\n\nvar tmpRaycastResult = new RaycastResult();\n\n/**\n * @method intersectBox\n * @private\n * @param  {Shape} shape\n * @param  {Quaternion} quat\n * @param  {Vec3} position\n * @param  {Body} body\n */\nRay.prototype.intersectBox = function(shape, quat, position, body, reportedShape){\n    return this.intersectConvex(shape.convexPolyhedronRepresentation, quat, position, body, reportedShape);\n};\nRay.prototype[Shape.types.BOX] = Ray.prototype.intersectBox;\n\n/**\n * @method intersectPlane\n * @private\n * @param  {Shape} shape\n * @param  {Quaternion} quat\n * @param  {Vec3} position\n * @param  {Body} body\n */\nRay.prototype.intersectPlane = function(shape, quat, position, body, reportedShape){\n    var from = this.from;\n    var to = this.to;\n    var direction = this._direction;\n\n    // Get plane normal\n    var worldNormal = new Vec3(0, 0, 1);\n    quat.vmult(worldNormal, worldNormal);\n\n    var len = new Vec3();\n    from.vsub(position, len);\n    var planeToFrom = len.dot(worldNormal);\n    to.vsub(position, len);\n    var planeToTo = len.dot(worldNormal);\n\n    if(planeToFrom * planeToTo > 0){\n        // \"from\" and \"to\" are on the same side of the plane... bail out\n        return;\n    }\n\n    if(from.distanceTo(to) < planeToFrom){\n        return;\n    }\n\n    var n_dot_dir = worldNormal.dot(direction);\n\n    if (Math.abs(n_dot_dir) < this.precision) {\n        // No intersection\n        return;\n    }\n\n    var planePointToFrom = new Vec3();\n    var dir_scaled_with_t = new Vec3();\n    var hitPointWorld = new Vec3();\n\n    from.vsub(position, planePointToFrom);\n    var t = -worldNormal.dot(planePointToFrom) / n_dot_dir;\n    direction.scale(t, dir_scaled_with_t);\n    from.vadd(dir_scaled_with_t, hitPointWorld);\n\n    this.reportIntersection(worldNormal, hitPointWorld, reportedShape, body, -1);\n};\nRay.prototype[Shape.types.PLANE] = Ray.prototype.intersectPlane;\n\n/**\n * Get the world AABB of the ray.\n * @method getAABB\n * @param  {AABB} aabb\n */\nRay.prototype.getAABB = function(result){\n    var to = this.to;\n    var from = this.from;\n    result.lowerBound.x = Math.min(to.x, from.x);\n    result.lowerBound.y = Math.min(to.y, from.y);\n    result.lowerBound.z = Math.min(to.z, from.z);\n    result.upperBound.x = Math.max(to.x, from.x);\n    result.upperBound.y = Math.max(to.y, from.y);\n    result.upperBound.z = Math.max(to.z, from.z);\n};\n\nvar intersectConvexOptions = {\n    faceList: [0]\n};\nvar worldPillarOffset = new Vec3();\nvar intersectHeightfield_localRay = new Ray();\nvar intersectHeightfield_index = [];\nvar intersectHeightfield_minMax = [];\n\n/**\n * @method intersectHeightfield\n * @private\n * @param  {Shape} shape\n * @param  {Quaternion} quat\n * @param  {Vec3} position\n * @param  {Body} body\n */\nRay.prototype.intersectHeightfield = function(shape, quat, position, body, reportedShape){\n    var data = shape.data,\n        w = shape.elementSize;\n\n    // Convert the ray to local heightfield coordinates\n    var localRay = intersectHeightfield_localRay; //new Ray(this.from, this.to);\n    localRay.from.copy(this.from);\n    localRay.to.copy(this.to);\n    Transform.pointToLocalFrame(position, quat, localRay.from, localRay.from);\n    Transform.pointToLocalFrame(position, quat, localRay.to, localRay.to);\n    localRay._updateDirection();\n\n    // Get the index of the data points to test against\n    var index = intersectHeightfield_index;\n    var iMinX, iMinY, iMaxX, iMaxY;\n\n    // Set to max\n    iMinX = iMinY = 0;\n    iMaxX = iMaxY = shape.data.length - 1;\n\n    var aabb = new AABB();\n    localRay.getAABB(aabb);\n\n    shape.getIndexOfPosition(aabb.lowerBound.x, aabb.lowerBound.y, index, true);\n    iMinX = Math.max(iMinX, index[0]);\n    iMinY = Math.max(iMinY, index[1]);\n    shape.getIndexOfPosition(aabb.upperBound.x, aabb.upperBound.y, index, true);\n    iMaxX = Math.min(iMaxX, index[0] + 1);\n    iMaxY = Math.min(iMaxY, index[1] + 1);\n\n    for(var i = iMinX; i < iMaxX; i++){\n        for(var j = iMinY; j < iMaxY; j++){\n\n            if(this.result._shouldStop){\n                return;\n            }\n\n            shape.getAabbAtIndex(i, j, aabb);\n            if(!aabb.overlapsRay(localRay)){\n                continue;\n            }\n\n            // Lower triangle\n            shape.getConvexTrianglePillar(i, j, false);\n            Transform.pointToWorldFrame(position, quat, shape.pillarOffset, worldPillarOffset);\n            this.intersectConvex(shape.pillarConvex, quat, worldPillarOffset, body, reportedShape, intersectConvexOptions);\n\n            if(this.result._shouldStop){\n                return;\n            }\n\n            // Upper triangle\n            shape.getConvexTrianglePillar(i, j, true);\n            Transform.pointToWorldFrame(position, quat, shape.pillarOffset, worldPillarOffset);\n            this.intersectConvex(shape.pillarConvex, quat, worldPillarOffset, body, reportedShape, intersectConvexOptions);\n        }\n    }\n};\nRay.prototype[Shape.types.HEIGHTFIELD] = Ray.prototype.intersectHeightfield;\n\nvar Ray_intersectSphere_intersectionPoint = new Vec3();\nvar Ray_intersectSphere_normal = new Vec3();\n\n/**\n * @method intersectSphere\n * @private\n * @param  {Shape} shape\n * @param  {Quaternion} quat\n * @param  {Vec3} position\n * @param  {Body} body\n */\nRay.prototype.intersectSphere = function(shape, quat, position, body, reportedShape){\n    var from = this.from,\n        to = this.to,\n        r = shape.radius;\n\n    var a = Math.pow(to.x - from.x, 2) + Math.pow(to.y - from.y, 2) + Math.pow(to.z - from.z, 2);\n    var b = 2 * ((to.x - from.x) * (from.x - position.x) + (to.y - from.y) * (from.y - position.y) + (to.z - from.z) * (from.z - position.z));\n    var c = Math.pow(from.x - position.x, 2) + Math.pow(from.y - position.y, 2) + Math.pow(from.z - position.z, 2) - Math.pow(r, 2);\n\n    var delta = Math.pow(b, 2) - 4 * a * c;\n\n    var intersectionPoint = Ray_intersectSphere_intersectionPoint;\n    var normal = Ray_intersectSphere_normal;\n\n    if(delta < 0){\n        // No intersection\n        return;\n\n    } else if(delta === 0){\n        // single intersection point\n        from.lerp(to, delta, intersectionPoint);\n\n        intersectionPoint.vsub(position, normal);\n        normal.normalize();\n\n        this.reportIntersection(normal, intersectionPoint, reportedShape, body, -1);\n\n    } else {\n        var d1 = (- b - Math.sqrt(delta)) / (2 * a);\n        var d2 = (- b + Math.sqrt(delta)) / (2 * a);\n\n        if(d1 >= 0 && d1 <= 1){\n            from.lerp(to, d1, intersectionPoint);\n            intersectionPoint.vsub(position, normal);\n            normal.normalize();\n            this.reportIntersection(normal, intersectionPoint, reportedShape, body, -1);\n        }\n\n        if(this.result._shouldStop){\n            return;\n        }\n\n        if(d2 >= 0 && d2 <= 1){\n            from.lerp(to, d2, intersectionPoint);\n            intersectionPoint.vsub(position, normal);\n            normal.normalize();\n            this.reportIntersection(normal, intersectionPoint, reportedShape, body, -1);\n        }\n    }\n};\nRay.prototype[Shape.types.SPHERE] = Ray.prototype.intersectSphere;\n\n\nvar intersectConvex_normal = new Vec3();\nvar intersectConvex_minDistNormal = new Vec3();\nvar intersectConvex_minDistIntersect = new Vec3();\nvar intersectConvex_vector = new Vec3();\n\n/**\n * @method intersectConvex\n * @private\n * @param  {Shape} shape\n * @param  {Quaternion} quat\n * @param  {Vec3} position\n * @param  {Body} body\n * @param {object} [options]\n * @param {array} [options.faceList]\n */\nRay.prototype.intersectConvex = function intersectConvex(\n    shape,\n    quat,\n    position,\n    body,\n    reportedShape,\n    options\n){\n    var minDistNormal = intersectConvex_minDistNormal;\n    var normal = intersectConvex_normal;\n    var vector = intersectConvex_vector;\n    var minDistIntersect = intersectConvex_minDistIntersect;\n    var faceList = (options && options.faceList) || null;\n\n    // Checking faces\n    var faces = shape.faces,\n        vertices = shape.vertices,\n        normals = shape.faceNormals;\n    var direction = this._direction;\n\n    var from = this.from;\n    var to = this.to;\n    var fromToDistance = from.distanceTo(to);\n\n    var minDist = -1;\n    var Nfaces = faceList ? faceList.length : faces.length;\n    var result = this.result;\n\n    for (var j = 0; !result._shouldStop && j < Nfaces; j++) {\n        var fi = faceList ? faceList[j] : j;\n\n        var face = faces[fi];\n        var faceNormal = normals[fi];\n        var q = quat;\n        var x = position;\n\n        // determine if ray intersects the plane of the face\n        // note: this works regardless of the direction of the face normal\n\n        // Get plane point in world coordinates...\n        vector.copy(vertices[face[0]]);\n        q.vmult(vector,vector);\n        vector.vadd(x,vector);\n\n        // ...but make it relative to the ray from. We'll fix this later.\n        vector.vsub(from,vector);\n\n        // Get plane normal\n        q.vmult(faceNormal,normal);\n\n        // If this dot product is negative, we have something interesting\n        var dot = direction.dot(normal);\n\n        // Bail out if ray and plane are parallel\n        if ( Math.abs( dot ) < this.precision ){\n            continue;\n        }\n\n        // calc distance to plane\n        var scalar = normal.dot(vector) / dot;\n\n        // if negative distance, then plane is behind ray\n        if (scalar < 0){\n            continue;\n        }\n\n        // if (dot < 0) {\n\n        // Intersection point is from + direction * scalar\n        direction.mult(scalar,intersectPoint);\n        intersectPoint.vadd(from,intersectPoint);\n\n        // a is the point we compare points b and c with.\n        a.copy(vertices[face[0]]);\n        q.vmult(a,a);\n        x.vadd(a,a);\n\n        for(var i = 1; !result._shouldStop && i < face.length - 1; i++){\n            // Transform 3 vertices to world coords\n            b.copy(vertices[face[i]]);\n            c.copy(vertices[face[i+1]]);\n            q.vmult(b,b);\n            q.vmult(c,c);\n            x.vadd(b,b);\n            x.vadd(c,c);\n\n            var distance = intersectPoint.distanceTo(from);\n\n            if(!(pointInTriangle(intersectPoint, a, b, c) || pointInTriangle(intersectPoint, b, a, c)) || distance > fromToDistance){\n                continue;\n            }\n\n            this.reportIntersection(normal, intersectPoint, reportedShape, body, fi);\n        }\n        // }\n    }\n};\nRay.prototype[Shape.types.CONVEXPOLYHEDRON] = Ray.prototype.intersectConvex;\n\nvar intersectTrimesh_normal = new Vec3();\nvar intersectTrimesh_localDirection = new Vec3();\nvar intersectTrimesh_localFrom = new Vec3();\nvar intersectTrimesh_localTo = new Vec3();\nvar intersectTrimesh_worldNormal = new Vec3();\nvar intersectTrimesh_worldIntersectPoint = new Vec3();\nvar intersectTrimesh_localAABB = new AABB();\nvar intersectTrimesh_triangles = [];\nvar intersectTrimesh_treeTransform = new Transform();\n\n/**\n * @method intersectTrimesh\n * @private\n * @param  {Shape} shape\n * @param  {Quaternion} quat\n * @param  {Vec3} position\n * @param  {Body} body\n * @param {object} [options]\n * @todo Optimize by transforming the world to local space first.\n * @todo Use Octree lookup\n */\nRay.prototype.intersectTrimesh = function intersectTrimesh(\n    mesh,\n    quat,\n    position,\n    body,\n    reportedShape,\n    options\n){\n    var normal = intersectTrimesh_normal;\n    var triangles = intersectTrimesh_triangles;\n    var treeTransform = intersectTrimesh_treeTransform;\n    var minDistNormal = intersectConvex_minDistNormal;\n    var vector = intersectConvex_vector;\n    var minDistIntersect = intersectConvex_minDistIntersect;\n    var localAABB = intersectTrimesh_localAABB;\n    var localDirection = intersectTrimesh_localDirection;\n    var localFrom = intersectTrimesh_localFrom;\n    var localTo = intersectTrimesh_localTo;\n    var worldIntersectPoint = intersectTrimesh_worldIntersectPoint;\n    var worldNormal = intersectTrimesh_worldNormal;\n    var faceList = (options && options.faceList) || null;\n\n    // Checking faces\n    var indices = mesh.indices,\n        vertices = mesh.vertices,\n        normals = mesh.faceNormals;\n\n    var from = this.from;\n    var to = this.to;\n    var direction = this._direction;\n\n    var minDist = -1;\n    treeTransform.position.copy(position);\n    treeTransform.quaternion.copy(quat);\n\n    // Transform ray to local space!\n    Transform.vectorToLocalFrame(position, quat, direction, localDirection);\n    Transform.pointToLocalFrame(position, quat, from, localFrom);\n    Transform.pointToLocalFrame(position, quat, to, localTo);\n\n    localTo.x *= mesh.scale.x;\n    localTo.y *= mesh.scale.y;\n    localTo.z *= mesh.scale.z;\n    localFrom.x *= mesh.scale.x;\n    localFrom.y *= mesh.scale.y;\n    localFrom.z *= mesh.scale.z;\n\n    localTo.vsub(localFrom, localDirection);\n    localDirection.normalize();\n\n    var fromToDistanceSquared = localFrom.distanceSquared(localTo);\n\n    mesh.tree.rayQuery(this, treeTransform, triangles);\n\n    for (var i = 0, N = triangles.length; !this.result._shouldStop && i !== N; i++) {\n        var trianglesIndex = triangles[i];\n\n        mesh.getNormal(trianglesIndex, normal);\n\n        // determine if ray intersects the plane of the face\n        // note: this works regardless of the direction of the face normal\n\n        // Get plane point in world coordinates...\n        mesh.getVertex(indices[trianglesIndex * 3], a);\n\n        // ...but make it relative to the ray from. We'll fix this later.\n        a.vsub(localFrom,vector);\n\n        // If this dot product is negative, we have something interesting\n        var dot = localDirection.dot(normal);\n\n        // Bail out if ray and plane are parallel\n        // if (Math.abs( dot ) < this.precision){\n        //     continue;\n        // }\n\n        // calc distance to plane\n        var scalar = normal.dot(vector) / dot;\n\n        // if negative distance, then plane is behind ray\n        if (scalar < 0){\n            continue;\n        }\n\n        // Intersection point is from + direction * scalar\n        localDirection.scale(scalar,intersectPoint);\n        intersectPoint.vadd(localFrom,intersectPoint);\n\n        // Get triangle vertices\n        mesh.getVertex(indices[trianglesIndex * 3 + 1], b);\n        mesh.getVertex(indices[trianglesIndex * 3 + 2], c);\n\n        var squaredDistance = intersectPoint.distanceSquared(localFrom);\n\n        if(!(pointInTriangle(intersectPoint, b, a, c) || pointInTriangle(intersectPoint, a, b, c)) || squaredDistance > fromToDistanceSquared){\n            continue;\n        }\n\n        // transform intersectpoint and normal to world\n        Transform.vectorToWorldFrame(quat, normal, worldNormal);\n        Transform.pointToWorldFrame(position, quat, intersectPoint, worldIntersectPoint);\n        this.reportIntersection(worldNormal, worldIntersectPoint, reportedShape, body, trianglesIndex);\n    }\n    triangles.length = 0;\n};\nRay.prototype[Shape.types.TRIMESH] = Ray.prototype.intersectTrimesh;\n\n\n/**\n * @method reportIntersection\n * @private\n * @param  {Vec3} normal\n * @param  {Vec3} hitPointWorld\n * @param  {Shape} shape\n * @param  {Body} body\n * @return {boolean} True if the intersections should continue\n */\nRay.prototype.reportIntersection = function(normal, hitPointWorld, shape, body, hitFaceIndex){\n    var from = this.from;\n    var to = this.to;\n    var distance = from.distanceTo(hitPointWorld);\n    var result = this.result;\n\n    // Skip back faces?\n    if(this.skipBackfaces && normal.dot(this._direction) > 0){\n        return;\n    }\n\n    result.hitFaceIndex = typeof(hitFaceIndex) !== 'undefined' ? hitFaceIndex : -1;\n\n    switch(this.mode){\n    case Ray.ALL:\n        this.hasHit = true;\n        result.set(\n            from,\n            to,\n            normal,\n            hitPointWorld,\n            shape,\n            body,\n            distance\n        );\n        result.hasHit = true;\n        this.callback(result);\n        break;\n\n    case Ray.CLOSEST:\n\n        // Store if closer than current closest\n        if(distance < result.distance || !result.hasHit){\n            this.hasHit = true;\n            result.hasHit = true;\n            result.set(\n                from,\n                to,\n                normal,\n                hitPointWorld,\n                shape,\n                body,\n                distance\n            );\n        }\n        break;\n\n    case Ray.ANY:\n\n        // Report and stop.\n        this.hasHit = true;\n        result.hasHit = true;\n        result.set(\n            from,\n            to,\n            normal,\n            hitPointWorld,\n            shape,\n            body,\n            distance\n        );\n        result._shouldStop = true;\n        break;\n    }\n};\n\nvar v0 = new Vec3(),\n    intersect = new Vec3();\nfunction distanceFromIntersection(from, direction, position) {\n\n    // v0 is vector from from to position\n    position.vsub(from,v0);\n    var dot = v0.dot(direction);\n\n    // intersect = direction*dot + from\n    direction.mult(dot,intersect);\n    intersect.vadd(from,intersect);\n\n    var distance = position.distanceTo(intersect);\n\n    return distance;\n}\n\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":458,"column":0},"generated":{"line":458,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":459,"column":0},"generated":{"line":459,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":460,"column":0},"generated":{"line":460,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":461,"column":0},"generated":{"line":461,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":462,"column":0},"generated":{"line":462,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":463,"column":0},"generated":{"line":463,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":464,"column":0},"generated":{"line":464,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":465,"column":0},"generated":{"line":465,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":466,"column":0},"generated":{"line":466,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":467,"column":0},"generated":{"line":467,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":468,"column":0},"generated":{"line":468,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":469,"column":0},"generated":{"line":469,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":470,"column":0},"generated":{"line":470,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":471,"column":0},"generated":{"line":471,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":472,"column":0},"generated":{"line":472,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":473,"column":0},"generated":{"line":473,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":474,"column":0},"generated":{"line":474,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":475,"column":0},"generated":{"line":475,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":476,"column":0},"generated":{"line":476,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":477,"column":0},"generated":{"line":477,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":478,"column":0},"generated":{"line":478,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":479,"column":0},"generated":{"line":479,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":480,"column":0},"generated":{"line":480,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":481,"column":0},"generated":{"line":481,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":482,"column":0},"generated":{"line":482,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":483,"column":0},"generated":{"line":483,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":484,"column":0},"generated":{"line":484,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":485,"column":0},"generated":{"line":485,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":486,"column":0},"generated":{"line":486,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":487,"column":0},"generated":{"line":487,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":488,"column":0},"generated":{"line":488,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":489,"column":0},"generated":{"line":489,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":490,"column":0},"generated":{"line":490,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":491,"column":0},"generated":{"line":491,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":492,"column":0},"generated":{"line":492,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":493,"column":0},"generated":{"line":493,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":494,"column":0},"generated":{"line":494,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":495,"column":0},"generated":{"line":495,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":496,"column":0},"generated":{"line":496,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":497,"column":0},"generated":{"line":497,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":498,"column":0},"generated":{"line":498,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":499,"column":0},"generated":{"line":499,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":500,"column":0},"generated":{"line":500,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":501,"column":0},"generated":{"line":501,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":502,"column":0},"generated":{"line":502,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":503,"column":0},"generated":{"line":503,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":504,"column":0},"generated":{"line":504,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":505,"column":0},"generated":{"line":505,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":506,"column":0},"generated":{"line":506,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":507,"column":0},"generated":{"line":507,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":508,"column":0},"generated":{"line":508,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":509,"column":0},"generated":{"line":509,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":510,"column":0},"generated":{"line":510,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":511,"column":0},"generated":{"line":511,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":512,"column":0},"generated":{"line":512,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":513,"column":0},"generated":{"line":513,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":514,"column":0},"generated":{"line":514,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":515,"column":0},"generated":{"line":515,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":516,"column":0},"generated":{"line":516,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":517,"column":0},"generated":{"line":517,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":518,"column":0},"generated":{"line":518,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":519,"column":0},"generated":{"line":519,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":520,"column":0},"generated":{"line":520,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":521,"column":0},"generated":{"line":521,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":522,"column":0},"generated":{"line":522,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":523,"column":0},"generated":{"line":523,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":524,"column":0},"generated":{"line":524,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":525,"column":0},"generated":{"line":525,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":526,"column":0},"generated":{"line":526,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":527,"column":0},"generated":{"line":527,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":528,"column":0},"generated":{"line":528,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":529,"column":0},"generated":{"line":529,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":530,"column":0},"generated":{"line":530,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":531,"column":0},"generated":{"line":531,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":532,"column":0},"generated":{"line":532,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":533,"column":0},"generated":{"line":533,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":534,"column":0},"generated":{"line":534,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":535,"column":0},"generated":{"line":535,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":536,"column":0},"generated":{"line":536,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":537,"column":0},"generated":{"line":537,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":538,"column":0},"generated":{"line":538,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":539,"column":0},"generated":{"line":539,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":540,"column":0},"generated":{"line":540,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":541,"column":0},"generated":{"line":541,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":542,"column":0},"generated":{"line":542,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":543,"column":0},"generated":{"line":543,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":544,"column":0},"generated":{"line":544,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":545,"column":0},"generated":{"line":545,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":546,"column":0},"generated":{"line":546,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":547,"column":0},"generated":{"line":547,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":548,"column":0},"generated":{"line":548,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":549,"column":0},"generated":{"line":549,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":550,"column":0},"generated":{"line":550,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":551,"column":0},"generated":{"line":551,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":552,"column":0},"generated":{"line":552,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":553,"column":0},"generated":{"line":553,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":554,"column":0},"generated":{"line":554,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":555,"column":0},"generated":{"line":555,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":556,"column":0},"generated":{"line":556,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":557,"column":0},"generated":{"line":557,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":558,"column":0},"generated":{"line":558,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":559,"column":0},"generated":{"line":559,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":560,"column":0},"generated":{"line":560,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":561,"column":0},"generated":{"line":561,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":562,"column":0},"generated":{"line":562,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":563,"column":0},"generated":{"line":563,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":564,"column":0},"generated":{"line":564,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":565,"column":0},"generated":{"line":565,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":566,"column":0},"generated":{"line":566,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":567,"column":0},"generated":{"line":567,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":568,"column":0},"generated":{"line":568,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":569,"column":0},"generated":{"line":569,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":570,"column":0},"generated":{"line":570,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":571,"column":0},"generated":{"line":571,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":572,"column":0},"generated":{"line":572,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":573,"column":0},"generated":{"line":573,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":574,"column":0},"generated":{"line":574,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":575,"column":0},"generated":{"line":575,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":576,"column":0},"generated":{"line":576,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":577,"column":0},"generated":{"line":577,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":578,"column":0},"generated":{"line":578,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":579,"column":0},"generated":{"line":579,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":580,"column":0},"generated":{"line":580,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":581,"column":0},"generated":{"line":581,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":582,"column":0},"generated":{"line":582,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":583,"column":0},"generated":{"line":583,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":584,"column":0},"generated":{"line":584,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":585,"column":0},"generated":{"line":585,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":586,"column":0},"generated":{"line":586,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":587,"column":0},"generated":{"line":587,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":588,"column":0},"generated":{"line":588,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":589,"column":0},"generated":{"line":589,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":590,"column":0},"generated":{"line":590,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":591,"column":0},"generated":{"line":591,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":592,"column":0},"generated":{"line":592,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":593,"column":0},"generated":{"line":593,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":594,"column":0},"generated":{"line":594,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":595,"column":0},"generated":{"line":595,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":596,"column":0},"generated":{"line":596,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":597,"column":0},"generated":{"line":597,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":598,"column":0},"generated":{"line":598,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":599,"column":0},"generated":{"line":599,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":600,"column":0},"generated":{"line":600,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":601,"column":0},"generated":{"line":601,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":602,"column":0},"generated":{"line":602,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":603,"column":0},"generated":{"line":603,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":604,"column":0},"generated":{"line":604,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":605,"column":0},"generated":{"line":605,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":606,"column":0},"generated":{"line":606,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":607,"column":0},"generated":{"line":607,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":608,"column":0},"generated":{"line":608,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":609,"column":0},"generated":{"line":609,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":610,"column":0},"generated":{"line":610,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":611,"column":0},"generated":{"line":611,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":612,"column":0},"generated":{"line":612,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":613,"column":0},"generated":{"line":613,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":614,"column":0},"generated":{"line":614,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":615,"column":0},"generated":{"line":615,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":616,"column":0},"generated":{"line":616,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":617,"column":0},"generated":{"line":617,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":618,"column":0},"generated":{"line":618,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":619,"column":0},"generated":{"line":619,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":620,"column":0},"generated":{"line":620,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":621,"column":0},"generated":{"line":621,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":622,"column":0},"generated":{"line":622,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":623,"column":0},"generated":{"line":623,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":624,"column":0},"generated":{"line":624,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":625,"column":0},"generated":{"line":625,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":626,"column":0},"generated":{"line":626,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":627,"column":0},"generated":{"line":627,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":628,"column":0},"generated":{"line":628,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":629,"column":0},"generated":{"line":629,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":630,"column":0},"generated":{"line":630,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":631,"column":0},"generated":{"line":631,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":632,"column":0},"generated":{"line":632,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":633,"column":0},"generated":{"line":633,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":634,"column":0},"generated":{"line":634,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":635,"column":0},"generated":{"line":635,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":636,"column":0},"generated":{"line":636,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":637,"column":0},"generated":{"line":637,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":638,"column":0},"generated":{"line":638,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":639,"column":0},"generated":{"line":639,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":640,"column":0},"generated":{"line":640,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":641,"column":0},"generated":{"line":641,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":642,"column":0},"generated":{"line":642,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":643,"column":0},"generated":{"line":643,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":644,"column":0},"generated":{"line":644,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":645,"column":0},"generated":{"line":645,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":646,"column":0},"generated":{"line":646,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":647,"column":0},"generated":{"line":647,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":648,"column":0},"generated":{"line":648,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":649,"column":0},"generated":{"line":649,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":650,"column":0},"generated":{"line":650,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":651,"column":0},"generated":{"line":651,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":652,"column":0},"generated":{"line":652,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":653,"column":0},"generated":{"line":653,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":654,"column":0},"generated":{"line":654,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":655,"column":0},"generated":{"line":655,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":656,"column":0},"generated":{"line":656,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":657,"column":0},"generated":{"line":657,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":658,"column":0},"generated":{"line":658,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":659,"column":0},"generated":{"line":659,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":660,"column":0},"generated":{"line":660,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":661,"column":0},"generated":{"line":661,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":662,"column":0},"generated":{"line":662,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":663,"column":0},"generated":{"line":663,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":664,"column":0},"generated":{"line":664,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":665,"column":0},"generated":{"line":665,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":666,"column":0},"generated":{"line":666,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":667,"column":0},"generated":{"line":667,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":668,"column":0},"generated":{"line":668,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":669,"column":0},"generated":{"line":669,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":670,"column":0},"generated":{"line":670,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":671,"column":0},"generated":{"line":671,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":672,"column":0},"generated":{"line":672,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":673,"column":0},"generated":{"line":673,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":674,"column":0},"generated":{"line":674,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":675,"column":0},"generated":{"line":675,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":676,"column":0},"generated":{"line":676,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":677,"column":0},"generated":{"line":677,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":678,"column":0},"generated":{"line":678,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":679,"column":0},"generated":{"line":679,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":680,"column":0},"generated":{"line":680,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":681,"column":0},"generated":{"line":681,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":682,"column":0},"generated":{"line":682,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":683,"column":0},"generated":{"line":683,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":684,"column":0},"generated":{"line":684,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":685,"column":0},"generated":{"line":685,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":686,"column":0},"generated":{"line":686,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":687,"column":0},"generated":{"line":687,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":688,"column":0},"generated":{"line":688,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":689,"column":0},"generated":{"line":689,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":690,"column":0},"generated":{"line":690,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":691,"column":0},"generated":{"line":691,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":692,"column":0},"generated":{"line":692,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":693,"column":0},"generated":{"line":693,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":694,"column":0},"generated":{"line":694,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":695,"column":0},"generated":{"line":695,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":696,"column":0},"generated":{"line":696,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":697,"column":0},"generated":{"line":697,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":698,"column":0},"generated":{"line":698,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":699,"column":0},"generated":{"line":699,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":700,"column":0},"generated":{"line":700,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":701,"column":0},"generated":{"line":701,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":702,"column":0},"generated":{"line":702,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":703,"column":0},"generated":{"line":703,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":704,"column":0},"generated":{"line":704,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":705,"column":0},"generated":{"line":705,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":706,"column":0},"generated":{"line":706,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":707,"column":0},"generated":{"line":707,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":708,"column":0},"generated":{"line":708,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":709,"column":0},"generated":{"line":709,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":710,"column":0},"generated":{"line":710,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":711,"column":0},"generated":{"line":711,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":712,"column":0},"generated":{"line":712,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":713,"column":0},"generated":{"line":713,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":714,"column":0},"generated":{"line":714,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":715,"column":0},"generated":{"line":715,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":716,"column":0},"generated":{"line":716,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":717,"column":0},"generated":{"line":717,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":718,"column":0},"generated":{"line":718,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":719,"column":0},"generated":{"line":719,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":720,"column":0},"generated":{"line":720,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":721,"column":0},"generated":{"line":721,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":722,"column":0},"generated":{"line":722,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":723,"column":0},"generated":{"line":723,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":724,"column":0},"generated":{"line":724,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":725,"column":0},"generated":{"line":725,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":726,"column":0},"generated":{"line":726,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":727,"column":0},"generated":{"line":727,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":728,"column":0},"generated":{"line":728,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":729,"column":0},"generated":{"line":729,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":730,"column":0},"generated":{"line":730,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":731,"column":0},"generated":{"line":731,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":732,"column":0},"generated":{"line":732,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":733,"column":0},"generated":{"line":733,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":734,"column":0},"generated":{"line":734,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":735,"column":0},"generated":{"line":735,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":736,"column":0},"generated":{"line":736,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":737,"column":0},"generated":{"line":737,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":738,"column":0},"generated":{"line":738,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":739,"column":0},"generated":{"line":739,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":740,"column":0},"generated":{"line":740,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":741,"column":0},"generated":{"line":741,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":742,"column":0},"generated":{"line":742,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":743,"column":0},"generated":{"line":743,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":744,"column":0},"generated":{"line":744,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":745,"column":0},"generated":{"line":745,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":746,"column":0},"generated":{"line":746,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":747,"column":0},"generated":{"line":747,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":748,"column":0},"generated":{"line":748,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":749,"column":0},"generated":{"line":749,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":750,"column":0},"generated":{"line":750,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":751,"column":0},"generated":{"line":751,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":752,"column":0},"generated":{"line":752,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":753,"column":0},"generated":{"line":753,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":754,"column":0},"generated":{"line":754,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":755,"column":0},"generated":{"line":755,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":756,"column":0},"generated":{"line":756,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":757,"column":0},"generated":{"line":757,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":758,"column":0},"generated":{"line":758,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":759,"column":0},"generated":{"line":759,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":760,"column":0},"generated":{"line":760,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":761,"column":0},"generated":{"line":761,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":762,"column":0},"generated":{"line":762,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":763,"column":0},"generated":{"line":763,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":764,"column":0},"generated":{"line":764,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":765,"column":0},"generated":{"line":765,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":766,"column":0},"generated":{"line":766,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":767,"column":0},"generated":{"line":767,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":768,"column":0},"generated":{"line":768,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":769,"column":0},"generated":{"line":769,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":770,"column":0},"generated":{"line":770,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":771,"column":0},"generated":{"line":771,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":772,"column":0},"generated":{"line":772,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":773,"column":0},"generated":{"line":773,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":774,"column":0},"generated":{"line":774,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":775,"column":0},"generated":{"line":775,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":776,"column":0},"generated":{"line":776,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":777,"column":0},"generated":{"line":777,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":778,"column":0},"generated":{"line":778,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":779,"column":0},"generated":{"line":779,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":780,"column":0},"generated":{"line":780,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":781,"column":0},"generated":{"line":781,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":782,"column":0},"generated":{"line":782,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":783,"column":0},"generated":{"line":783,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":784,"column":0},"generated":{"line":784,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":785,"column":0},"generated":{"line":785,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":786,"column":0},"generated":{"line":786,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":787,"column":0},"generated":{"line":787,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":788,"column":0},"generated":{"line":788,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":789,"column":0},"generated":{"line":789,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":790,"column":0},"generated":{"line":790,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":791,"column":0},"generated":{"line":791,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":792,"column":0},"generated":{"line":792,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":793,"column":0},"generated":{"line":793,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":794,"column":0},"generated":{"line":794,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":795,"column":0},"generated":{"line":795,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":796,"column":0},"generated":{"line":796,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":797,"column":0},"generated":{"line":797,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":798,"column":0},"generated":{"line":798,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":799,"column":0},"generated":{"line":799,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":800,"column":0},"generated":{"line":800,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":801,"column":0},"generated":{"line":801,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":802,"column":0},"generated":{"line":802,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":803,"column":0},"generated":{"line":803,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":804,"column":0},"generated":{"line":804,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":805,"column":0},"generated":{"line":805,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":806,"column":0},"generated":{"line":806,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":807,"column":0},"generated":{"line":807,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":808,"column":0},"generated":{"line":808,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":809,"column":0},"generated":{"line":809,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":810,"column":0},"generated":{"line":810,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":811,"column":0},"generated":{"line":811,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":812,"column":0},"generated":{"line":812,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":813,"column":0},"generated":{"line":813,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":814,"column":0},"generated":{"line":814,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":815,"column":0},"generated":{"line":815,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":816,"column":0},"generated":{"line":816,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":817,"column":0},"generated":{"line":817,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":818,"column":0},"generated":{"line":818,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":819,"column":0},"generated":{"line":819,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":820,"column":0},"generated":{"line":820,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":821,"column":0},"generated":{"line":821,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":822,"column":0},"generated":{"line":822,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":823,"column":0},"generated":{"line":823,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":824,"column":0},"generated":{"line":824,"column":0}},{"source":"../node_modules/cannon/src/collision/Ray.js","original":{"line":825,"column":0},"generated":{"line":825,"column":0}}],"sources":{"../node_modules/cannon/src/collision/Ray.js":"module.exports = Ray;\n\nvar Vec3 = require('../math/Vec3');\nvar Quaternion = require('../math/Quaternion');\nvar Transform = require('../math/Transform');\nvar ConvexPolyhedron = require('../shapes/ConvexPolyhedron');\nvar Box = require('../shapes/Box');\nvar RaycastResult = require('../collision/RaycastResult');\nvar Shape = require('../shapes/Shape');\nvar AABB = require('../collision/AABB');\n\n/**\n * A line in 3D space that intersects bodies and return points.\n * @class Ray\n * @constructor\n * @param {Vec3} from\n * @param {Vec3} to\n */\nfunction Ray(from, to){\n    /**\n     * @property {Vec3} from\n     */\n    this.from = from ? from.clone() : new Vec3();\n\n    /**\n     * @property {Vec3} to\n     */\n    this.to = to ? to.clone() : new Vec3();\n\n    /**\n     * @private\n     * @property {Vec3} _direction\n     */\n    this._direction = new Vec3();\n\n    /**\n     * The precision of the ray. Used when checking parallelity etc.\n     * @property {Number} precision\n     */\n    this.precision = 0.0001;\n\n    /**\n     * Set to true if you want the Ray to take .collisionResponse flags into account on bodies and shapes.\n     * @property {Boolean} checkCollisionResponse\n     */\n    this.checkCollisionResponse = true;\n\n    /**\n     * If set to true, the ray skips any hits with normal.dot(rayDirection) < 0.\n     * @property {Boolean} skipBackfaces\n     */\n    this.skipBackfaces = false;\n\n    /**\n     * @property {number} collisionFilterMask\n     * @default -1\n     */\n    this.collisionFilterMask = -1;\n\n    /**\n     * @property {number} collisionFilterGroup\n     * @default -1\n     */\n    this.collisionFilterGroup = -1;\n\n    /**\n     * The intersection mode. Should be Ray.ANY, Ray.ALL or Ray.CLOSEST.\n     * @property {number} mode\n     */\n    this.mode = Ray.ANY;\n\n    /**\n     * Current result object.\n     * @property {RaycastResult} result\n     */\n    this.result = new RaycastResult();\n\n    /**\n     * Will be set to true during intersectWorld() if the ray hit anything.\n     * @property {Boolean} hasHit\n     */\n    this.hasHit = false;\n\n    /**\n     * Current, user-provided result callback. Will be used if mode is Ray.ALL.\n     * @property {Function} callback\n     */\n    this.callback = function(result){};\n}\nRay.prototype.constructor = Ray;\n\nRay.CLOSEST = 1;\nRay.ANY = 2;\nRay.ALL = 4;\n\nvar tmpAABB = new AABB();\nvar tmpArray = [];\n\n/**\n * Do itersection against all bodies in the given World.\n * @method intersectWorld\n * @param  {World} world\n * @param  {object} options\n * @return {Boolean} True if the ray hit anything, otherwise false.\n */\nRay.prototype.intersectWorld = function (world, options) {\n    this.mode = options.mode || Ray.ANY;\n    this.result = options.result || new RaycastResult();\n    this.skipBackfaces = !!options.skipBackfaces;\n    this.collisionFilterMask = typeof(options.collisionFilterMask) !== 'undefined' ? options.collisionFilterMask : -1;\n    this.collisionFilterGroup = typeof(options.collisionFilterGroup) !== 'undefined' ? options.collisionFilterGroup : -1;\n    if(options.from){\n        this.from.copy(options.from);\n    }\n    if(options.to){\n        this.to.copy(options.to);\n    }\n    this.callback = options.callback || function(){};\n    this.hasHit = false;\n\n    this.result.reset();\n    this._updateDirection();\n\n    this.getAABB(tmpAABB);\n    tmpArray.length = 0;\n    world.broadphase.aabbQuery(world, tmpAABB, tmpArray);\n    this.intersectBodies(tmpArray);\n\n    return this.hasHit;\n};\n\nvar v1 = new Vec3(),\n    v2 = new Vec3();\n\n/*\n * As per \"Barycentric Technique\" as named here http://www.blackpawn.com/texts/pointinpoly/default.html But without the division\n */\nRay.pointInTriangle = pointInTriangle;\nfunction pointInTriangle(p, a, b, c) {\n    c.vsub(a,v0);\n    b.vsub(a,v1);\n    p.vsub(a,v2);\n\n    var dot00 = v0.dot( v0 );\n    var dot01 = v0.dot( v1 );\n    var dot02 = v0.dot( v2 );\n    var dot11 = v1.dot( v1 );\n    var dot12 = v1.dot( v2 );\n\n    var u,v;\n\n    return  ( (u = dot11 * dot02 - dot01 * dot12) >= 0 ) &&\n            ( (v = dot00 * dot12 - dot01 * dot02) >= 0 ) &&\n            ( u + v < ( dot00 * dot11 - dot01 * dot01 ) );\n}\n\n/**\n * Shoot a ray at a body, get back information about the hit.\n * @method intersectBody\n * @private\n * @param {Body} body\n * @param {RaycastResult} [result] Deprecated - set the result property of the Ray instead.\n */\nvar intersectBody_xi = new Vec3();\nvar intersectBody_qi = new Quaternion();\nRay.prototype.intersectBody = function (body, result) {\n    if(result){\n        this.result = result;\n        this._updateDirection();\n    }\n    var checkCollisionResponse = this.checkCollisionResponse;\n\n    if(checkCollisionResponse && !body.collisionResponse){\n        return;\n    }\n\n    if((this.collisionFilterGroup & body.collisionFilterMask)===0 || (body.collisionFilterGroup & this.collisionFilterMask)===0){\n        return;\n    }\n\n    var xi = intersectBody_xi;\n    var qi = intersectBody_qi;\n\n    for (var i = 0, N = body.shapes.length; i < N; i++) {\n        var shape = body.shapes[i];\n\n        if(checkCollisionResponse && !shape.collisionResponse){\n            continue; // Skip\n        }\n\n        body.quaternion.mult(body.shapeOrientations[i], qi);\n        body.quaternion.vmult(body.shapeOffsets[i], xi);\n        xi.vadd(body.position, xi);\n\n        this.intersectShape(\n            shape,\n            qi,\n            xi,\n            body\n        );\n\n        if(this.result._shouldStop){\n            break;\n        }\n    }\n};\n\n/**\n * @method intersectBodies\n * @param {Array} bodies An array of Body objects.\n * @param {RaycastResult} [result] Deprecated\n */\nRay.prototype.intersectBodies = function (bodies, result) {\n    if(result){\n        this.result = result;\n        this._updateDirection();\n    }\n\n    for ( var i = 0, l = bodies.length; !this.result._shouldStop && i < l; i ++ ) {\n        this.intersectBody(bodies[i]);\n    }\n};\n\n/**\n * Updates the _direction vector.\n * @private\n * @method _updateDirection\n */\nRay.prototype._updateDirection = function(){\n    this.to.vsub(this.from, this._direction);\n    this._direction.normalize();\n};\n\n/**\n * @method intersectShape\n * @private\n * @param {Shape} shape\n * @param {Quaternion} quat\n * @param {Vec3} position\n * @param {Body} body\n */\nRay.prototype.intersectShape = function(shape, quat, position, body){\n    var from = this.from;\n\n\n    // Checking boundingSphere\n    var distance = distanceFromIntersection(from, this._direction, position);\n    if ( distance > shape.boundingSphereRadius ) {\n        return;\n    }\n\n    var intersectMethod = this[shape.type];\n    if(intersectMethod){\n        intersectMethod.call(this, shape, quat, position, body, shape);\n    }\n};\n\nvar vector = new Vec3();\nvar normal = new Vec3();\nvar intersectPoint = new Vec3();\n\nvar a = new Vec3();\nvar b = new Vec3();\nvar c = new Vec3();\nvar d = new Vec3();\n\nvar tmpRaycastResult = new RaycastResult();\n\n/**\n * @method intersectBox\n * @private\n * @param  {Shape} shape\n * @param  {Quaternion} quat\n * @param  {Vec3} position\n * @param  {Body} body\n */\nRay.prototype.intersectBox = function(shape, quat, position, body, reportedShape){\n    return this.intersectConvex(shape.convexPolyhedronRepresentation, quat, position, body, reportedShape);\n};\nRay.prototype[Shape.types.BOX] = Ray.prototype.intersectBox;\n\n/**\n * @method intersectPlane\n * @private\n * @param  {Shape} shape\n * @param  {Quaternion} quat\n * @param  {Vec3} position\n * @param  {Body} body\n */\nRay.prototype.intersectPlane = function(shape, quat, position, body, reportedShape){\n    var from = this.from;\n    var to = this.to;\n    var direction = this._direction;\n\n    // Get plane normal\n    var worldNormal = new Vec3(0, 0, 1);\n    quat.vmult(worldNormal, worldNormal);\n\n    var len = new Vec3();\n    from.vsub(position, len);\n    var planeToFrom = len.dot(worldNormal);\n    to.vsub(position, len);\n    var planeToTo = len.dot(worldNormal);\n\n    if(planeToFrom * planeToTo > 0){\n        // \"from\" and \"to\" are on the same side of the plane... bail out\n        return;\n    }\n\n    if(from.distanceTo(to) < planeToFrom){\n        return;\n    }\n\n    var n_dot_dir = worldNormal.dot(direction);\n\n    if (Math.abs(n_dot_dir) < this.precision) {\n        // No intersection\n        return;\n    }\n\n    var planePointToFrom = new Vec3();\n    var dir_scaled_with_t = new Vec3();\n    var hitPointWorld = new Vec3();\n\n    from.vsub(position, planePointToFrom);\n    var t = -worldNormal.dot(planePointToFrom) / n_dot_dir;\n    direction.scale(t, dir_scaled_with_t);\n    from.vadd(dir_scaled_with_t, hitPointWorld);\n\n    this.reportIntersection(worldNormal, hitPointWorld, reportedShape, body, -1);\n};\nRay.prototype[Shape.types.PLANE] = Ray.prototype.intersectPlane;\n\n/**\n * Get the world AABB of the ray.\n * @method getAABB\n * @param  {AABB} aabb\n */\nRay.prototype.getAABB = function(result){\n    var to = this.to;\n    var from = this.from;\n    result.lowerBound.x = Math.min(to.x, from.x);\n    result.lowerBound.y = Math.min(to.y, from.y);\n    result.lowerBound.z = Math.min(to.z, from.z);\n    result.upperBound.x = Math.max(to.x, from.x);\n    result.upperBound.y = Math.max(to.y, from.y);\n    result.upperBound.z = Math.max(to.z, from.z);\n};\n\nvar intersectConvexOptions = {\n    faceList: [0]\n};\nvar worldPillarOffset = new Vec3();\nvar intersectHeightfield_localRay = new Ray();\nvar intersectHeightfield_index = [];\nvar intersectHeightfield_minMax = [];\n\n/**\n * @method intersectHeightfield\n * @private\n * @param  {Shape} shape\n * @param  {Quaternion} quat\n * @param  {Vec3} position\n * @param  {Body} body\n */\nRay.prototype.intersectHeightfield = function(shape, quat, position, body, reportedShape){\n    var data = shape.data,\n        w = shape.elementSize;\n\n    // Convert the ray to local heightfield coordinates\n    var localRay = intersectHeightfield_localRay; //new Ray(this.from, this.to);\n    localRay.from.copy(this.from);\n    localRay.to.copy(this.to);\n    Transform.pointToLocalFrame(position, quat, localRay.from, localRay.from);\n    Transform.pointToLocalFrame(position, quat, localRay.to, localRay.to);\n    localRay._updateDirection();\n\n    // Get the index of the data points to test against\n    var index = intersectHeightfield_index;\n    var iMinX, iMinY, iMaxX, iMaxY;\n\n    // Set to max\n    iMinX = iMinY = 0;\n    iMaxX = iMaxY = shape.data.length - 1;\n\n    var aabb = new AABB();\n    localRay.getAABB(aabb);\n\n    shape.getIndexOfPosition(aabb.lowerBound.x, aabb.lowerBound.y, index, true);\n    iMinX = Math.max(iMinX, index[0]);\n    iMinY = Math.max(iMinY, index[1]);\n    shape.getIndexOfPosition(aabb.upperBound.x, aabb.upperBound.y, index, true);\n    iMaxX = Math.min(iMaxX, index[0] + 1);\n    iMaxY = Math.min(iMaxY, index[1] + 1);\n\n    for(var i = iMinX; i < iMaxX; i++){\n        for(var j = iMinY; j < iMaxY; j++){\n\n            if(this.result._shouldStop){\n                return;\n            }\n\n            shape.getAabbAtIndex(i, j, aabb);\n            if(!aabb.overlapsRay(localRay)){\n                continue;\n            }\n\n            // Lower triangle\n            shape.getConvexTrianglePillar(i, j, false);\n            Transform.pointToWorldFrame(position, quat, shape.pillarOffset, worldPillarOffset);\n            this.intersectConvex(shape.pillarConvex, quat, worldPillarOffset, body, reportedShape, intersectConvexOptions);\n\n            if(this.result._shouldStop){\n                return;\n            }\n\n            // Upper triangle\n            shape.getConvexTrianglePillar(i, j, true);\n            Transform.pointToWorldFrame(position, quat, shape.pillarOffset, worldPillarOffset);\n            this.intersectConvex(shape.pillarConvex, quat, worldPillarOffset, body, reportedShape, intersectConvexOptions);\n        }\n    }\n};\nRay.prototype[Shape.types.HEIGHTFIELD] = Ray.prototype.intersectHeightfield;\n\nvar Ray_intersectSphere_intersectionPoint = new Vec3();\nvar Ray_intersectSphere_normal = new Vec3();\n\n/**\n * @method intersectSphere\n * @private\n * @param  {Shape} shape\n * @param  {Quaternion} quat\n * @param  {Vec3} position\n * @param  {Body} body\n */\nRay.prototype.intersectSphere = function(shape, quat, position, body, reportedShape){\n    var from = this.from,\n        to = this.to,\n        r = shape.radius;\n\n    var a = Math.pow(to.x - from.x, 2) + Math.pow(to.y - from.y, 2) + Math.pow(to.z - from.z, 2);\n    var b = 2 * ((to.x - from.x) * (from.x - position.x) + (to.y - from.y) * (from.y - position.y) + (to.z - from.z) * (from.z - position.z));\n    var c = Math.pow(from.x - position.x, 2) + Math.pow(from.y - position.y, 2) + Math.pow(from.z - position.z, 2) - Math.pow(r, 2);\n\n    var delta = Math.pow(b, 2) - 4 * a * c;\n\n    var intersectionPoint = Ray_intersectSphere_intersectionPoint;\n    var normal = Ray_intersectSphere_normal;\n\n    if(delta < 0){\n        // No intersection\n        return;\n\n    } else if(delta === 0){\n        // single intersection point\n        from.lerp(to, delta, intersectionPoint);\n\n        intersectionPoint.vsub(position, normal);\n        normal.normalize();\n\n        this.reportIntersection(normal, intersectionPoint, reportedShape, body, -1);\n\n    } else {\n        var d1 = (- b - Math.sqrt(delta)) / (2 * a);\n        var d2 = (- b + Math.sqrt(delta)) / (2 * a);\n\n        if(d1 >= 0 && d1 <= 1){\n            from.lerp(to, d1, intersectionPoint);\n            intersectionPoint.vsub(position, normal);\n            normal.normalize();\n            this.reportIntersection(normal, intersectionPoint, reportedShape, body, -1);\n        }\n\n        if(this.result._shouldStop){\n            return;\n        }\n\n        if(d2 >= 0 && d2 <= 1){\n            from.lerp(to, d2, intersectionPoint);\n            intersectionPoint.vsub(position, normal);\n            normal.normalize();\n            this.reportIntersection(normal, intersectionPoint, reportedShape, body, -1);\n        }\n    }\n};\nRay.prototype[Shape.types.SPHERE] = Ray.prototype.intersectSphere;\n\n\nvar intersectConvex_normal = new Vec3();\nvar intersectConvex_minDistNormal = new Vec3();\nvar intersectConvex_minDistIntersect = new Vec3();\nvar intersectConvex_vector = new Vec3();\n\n/**\n * @method intersectConvex\n * @private\n * @param  {Shape} shape\n * @param  {Quaternion} quat\n * @param  {Vec3} position\n * @param  {Body} body\n * @param {object} [options]\n * @param {array} [options.faceList]\n */\nRay.prototype.intersectConvex = function intersectConvex(\n    shape,\n    quat,\n    position,\n    body,\n    reportedShape,\n    options\n){\n    var minDistNormal = intersectConvex_minDistNormal;\n    var normal = intersectConvex_normal;\n    var vector = intersectConvex_vector;\n    var minDistIntersect = intersectConvex_minDistIntersect;\n    var faceList = (options && options.faceList) || null;\n\n    // Checking faces\n    var faces = shape.faces,\n        vertices = shape.vertices,\n        normals = shape.faceNormals;\n    var direction = this._direction;\n\n    var from = this.from;\n    var to = this.to;\n    var fromToDistance = from.distanceTo(to);\n\n    var minDist = -1;\n    var Nfaces = faceList ? faceList.length : faces.length;\n    var result = this.result;\n\n    for (var j = 0; !result._shouldStop && j < Nfaces; j++) {\n        var fi = faceList ? faceList[j] : j;\n\n        var face = faces[fi];\n        var faceNormal = normals[fi];\n        var q = quat;\n        var x = position;\n\n        // determine if ray intersects the plane of the face\n        // note: this works regardless of the direction of the face normal\n\n        // Get plane point in world coordinates...\n        vector.copy(vertices[face[0]]);\n        q.vmult(vector,vector);\n        vector.vadd(x,vector);\n\n        // ...but make it relative to the ray from. We'll fix this later.\n        vector.vsub(from,vector);\n\n        // Get plane normal\n        q.vmult(faceNormal,normal);\n\n        // If this dot product is negative, we have something interesting\n        var dot = direction.dot(normal);\n\n        // Bail out if ray and plane are parallel\n        if ( Math.abs( dot ) < this.precision ){\n            continue;\n        }\n\n        // calc distance to plane\n        var scalar = normal.dot(vector) / dot;\n\n        // if negative distance, then plane is behind ray\n        if (scalar < 0){\n            continue;\n        }\n\n        // if (dot < 0) {\n\n        // Intersection point is from + direction * scalar\n        direction.mult(scalar,intersectPoint);\n        intersectPoint.vadd(from,intersectPoint);\n\n        // a is the point we compare points b and c with.\n        a.copy(vertices[face[0]]);\n        q.vmult(a,a);\n        x.vadd(a,a);\n\n        for(var i = 1; !result._shouldStop && i < face.length - 1; i++){\n            // Transform 3 vertices to world coords\n            b.copy(vertices[face[i]]);\n            c.copy(vertices[face[i+1]]);\n            q.vmult(b,b);\n            q.vmult(c,c);\n            x.vadd(b,b);\n            x.vadd(c,c);\n\n            var distance = intersectPoint.distanceTo(from);\n\n            if(!(pointInTriangle(intersectPoint, a, b, c) || pointInTriangle(intersectPoint, b, a, c)) || distance > fromToDistance){\n                continue;\n            }\n\n            this.reportIntersection(normal, intersectPoint, reportedShape, body, fi);\n        }\n        // }\n    }\n};\nRay.prototype[Shape.types.CONVEXPOLYHEDRON] = Ray.prototype.intersectConvex;\n\nvar intersectTrimesh_normal = new Vec3();\nvar intersectTrimesh_localDirection = new Vec3();\nvar intersectTrimesh_localFrom = new Vec3();\nvar intersectTrimesh_localTo = new Vec3();\nvar intersectTrimesh_worldNormal = new Vec3();\nvar intersectTrimesh_worldIntersectPoint = new Vec3();\nvar intersectTrimesh_localAABB = new AABB();\nvar intersectTrimesh_triangles = [];\nvar intersectTrimesh_treeTransform = new Transform();\n\n/**\n * @method intersectTrimesh\n * @private\n * @param  {Shape} shape\n * @param  {Quaternion} quat\n * @param  {Vec3} position\n * @param  {Body} body\n * @param {object} [options]\n * @todo Optimize by transforming the world to local space first.\n * @todo Use Octree lookup\n */\nRay.prototype.intersectTrimesh = function intersectTrimesh(\n    mesh,\n    quat,\n    position,\n    body,\n    reportedShape,\n    options\n){\n    var normal = intersectTrimesh_normal;\n    var triangles = intersectTrimesh_triangles;\n    var treeTransform = intersectTrimesh_treeTransform;\n    var minDistNormal = intersectConvex_minDistNormal;\n    var vector = intersectConvex_vector;\n    var minDistIntersect = intersectConvex_minDistIntersect;\n    var localAABB = intersectTrimesh_localAABB;\n    var localDirection = intersectTrimesh_localDirection;\n    var localFrom = intersectTrimesh_localFrom;\n    var localTo = intersectTrimesh_localTo;\n    var worldIntersectPoint = intersectTrimesh_worldIntersectPoint;\n    var worldNormal = intersectTrimesh_worldNormal;\n    var faceList = (options && options.faceList) || null;\n\n    // Checking faces\n    var indices = mesh.indices,\n        vertices = mesh.vertices,\n        normals = mesh.faceNormals;\n\n    var from = this.from;\n    var to = this.to;\n    var direction = this._direction;\n\n    var minDist = -1;\n    treeTransform.position.copy(position);\n    treeTransform.quaternion.copy(quat);\n\n    // Transform ray to local space!\n    Transform.vectorToLocalFrame(position, quat, direction, localDirection);\n    Transform.pointToLocalFrame(position, quat, from, localFrom);\n    Transform.pointToLocalFrame(position, quat, to, localTo);\n\n    localTo.x *= mesh.scale.x;\n    localTo.y *= mesh.scale.y;\n    localTo.z *= mesh.scale.z;\n    localFrom.x *= mesh.scale.x;\n    localFrom.y *= mesh.scale.y;\n    localFrom.z *= mesh.scale.z;\n\n    localTo.vsub(localFrom, localDirection);\n    localDirection.normalize();\n\n    var fromToDistanceSquared = localFrom.distanceSquared(localTo);\n\n    mesh.tree.rayQuery(this, treeTransform, triangles);\n\n    for (var i = 0, N = triangles.length; !this.result._shouldStop && i !== N; i++) {\n        var trianglesIndex = triangles[i];\n\n        mesh.getNormal(trianglesIndex, normal);\n\n        // determine if ray intersects the plane of the face\n        // note: this works regardless of the direction of the face normal\n\n        // Get plane point in world coordinates...\n        mesh.getVertex(indices[trianglesIndex * 3], a);\n\n        // ...but make it relative to the ray from. We'll fix this later.\n        a.vsub(localFrom,vector);\n\n        // If this dot product is negative, we have something interesting\n        var dot = localDirection.dot(normal);\n\n        // Bail out if ray and plane are parallel\n        // if (Math.abs( dot ) < this.precision){\n        //     continue;\n        // }\n\n        // calc distance to plane\n        var scalar = normal.dot(vector) / dot;\n\n        // if negative distance, then plane is behind ray\n        if (scalar < 0){\n            continue;\n        }\n\n        // Intersection point is from + direction * scalar\n        localDirection.scale(scalar,intersectPoint);\n        intersectPoint.vadd(localFrom,intersectPoint);\n\n        // Get triangle vertices\n        mesh.getVertex(indices[trianglesIndex * 3 + 1], b);\n        mesh.getVertex(indices[trianglesIndex * 3 + 2], c);\n\n        var squaredDistance = intersectPoint.distanceSquared(localFrom);\n\n        if(!(pointInTriangle(intersectPoint, b, a, c) || pointInTriangle(intersectPoint, a, b, c)) || squaredDistance > fromToDistanceSquared){\n            continue;\n        }\n\n        // transform intersectpoint and normal to world\n        Transform.vectorToWorldFrame(quat, normal, worldNormal);\n        Transform.pointToWorldFrame(position, quat, intersectPoint, worldIntersectPoint);\n        this.reportIntersection(worldNormal, worldIntersectPoint, reportedShape, body, trianglesIndex);\n    }\n    triangles.length = 0;\n};\nRay.prototype[Shape.types.TRIMESH] = Ray.prototype.intersectTrimesh;\n\n\n/**\n * @method reportIntersection\n * @private\n * @param  {Vec3} normal\n * @param  {Vec3} hitPointWorld\n * @param  {Shape} shape\n * @param  {Body} body\n * @return {boolean} True if the intersections should continue\n */\nRay.prototype.reportIntersection = function(normal, hitPointWorld, shape, body, hitFaceIndex){\n    var from = this.from;\n    var to = this.to;\n    var distance = from.distanceTo(hitPointWorld);\n    var result = this.result;\n\n    // Skip back faces?\n    if(this.skipBackfaces && normal.dot(this._direction) > 0){\n        return;\n    }\n\n    result.hitFaceIndex = typeof(hitFaceIndex) !== 'undefined' ? hitFaceIndex : -1;\n\n    switch(this.mode){\n    case Ray.ALL:\n        this.hasHit = true;\n        result.set(\n            from,\n            to,\n            normal,\n            hitPointWorld,\n            shape,\n            body,\n            distance\n        );\n        result.hasHit = true;\n        this.callback(result);\n        break;\n\n    case Ray.CLOSEST:\n\n        // Store if closer than current closest\n        if(distance < result.distance || !result.hasHit){\n            this.hasHit = true;\n            result.hasHit = true;\n            result.set(\n                from,\n                to,\n                normal,\n                hitPointWorld,\n                shape,\n                body,\n                distance\n            );\n        }\n        break;\n\n    case Ray.ANY:\n\n        // Report and stop.\n        this.hasHit = true;\n        result.hasHit = true;\n        result.set(\n            from,\n            to,\n            normal,\n            hitPointWorld,\n            shape,\n            body,\n            distance\n        );\n        result._shouldStop = true;\n        break;\n    }\n};\n\nvar v0 = new Vec3(),\n    intersect = new Vec3();\nfunction distanceFromIntersection(from, direction, position) {\n\n    // v0 is vector from from to position\n    position.vsub(from,v0);\n    var dot = v0.dot(direction);\n\n    // intersect = direction*dot + from\n    direction.mult(dot,intersect);\n    intersect.vadd(from,intersect);\n\n    var distance = position.distanceTo(intersect);\n\n    return distance;\n}\n\n"},"lineCount":825}},"error":null,"hash":"2838e2b037af6909a49b61bda6b83f9b","cacheData":{"env":{}}}